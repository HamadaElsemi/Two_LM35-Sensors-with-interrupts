
MP5_2TempSensor_Interrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ee4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000180  00800060  00002ee4  00002f78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008001e0  008001e0  000030f8  2**0
                  ALLOC
  3 .stab         00003138  00000000  00000000  000030f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001424  00000000  00000000  00006230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00007654  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  000077d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  000079a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  000099b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000ab26  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000bb28  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000bcc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000bf89  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c837  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__vector_1>
       8:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__vector_2>
       c:	0c 94 a1 08 	jmp	0x1142	; 0x1142 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ee       	ldi	r30, 0xE4	; 228
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3e       	cpi	r26, 0xE0	; 224
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 ee       	ldi	r26, 0xE0	; 224
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3e       	cpi	r26, 0xE6	; 230
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6d 15 	call	0x2ada	; 0x2ada <main>
      8a:	0c 94 70 17 	jmp	0x2ee0	; 0x2ee0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af eb       	ldi	r26, 0xBF	; 191
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 55 17 	jmp	0x2eaa	; 0x2eaa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 45 17 	jmp	0x2e8a	; 0x2e8a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 45 17 	jmp	0x2e8a	; 0x2e8a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f eb       	ldi	r24, 0xBF	; 191
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 55 17 	jmp	0x2eaa	; 0x2eaa <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 45 17 	jmp	0x2e8a	; 0x2e8a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 45 17 	jmp	0x2e8a	; 0x2e8a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 45 17 	jmp	0x2e8a	; 0x2e8a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 49 17 	jmp	0x2e92	; 0x2e92 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 65 17 	jmp	0x2eca	; 0x2eca <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 41 17 	jmp	0x2e82	; 0x2e82 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 5d 17 	jmp	0x2eba	; 0x2eba <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e9 53       	subi	r30, 0x39	; 57
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <GIE_VidEn>:
/*************************MCAL*************************/
#include "GIE_Interface.h"
#include "GIE_Config.h"
#include "GIE_Private.h"

void GIE_VidEn(){
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
     cde:	af e5       	ldi	r26, 0x5F	; 95
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	ef e5       	ldi	r30, 0x5F	; 95
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	80 68       	ori	r24, 0x80	; 128
     cea:	8c 93       	st	X, r24
}
     cec:	cf 91       	pop	r28
     cee:	df 91       	pop	r29
     cf0:	08 95       	ret

00000cf2 <GIE_VidDisable>:
void GIE_VidDisable(void){
     cf2:	df 93       	push	r29
     cf4:	cf 93       	push	r28
     cf6:	cd b7       	in	r28, 0x3d	; 61
     cf8:	de b7       	in	r29, 0x3e	; 62
CLR_BIT(SREG,SREG_I);
     cfa:	af e5       	ldi	r26, 0x5F	; 95
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	ef e5       	ldi	r30, 0x5F	; 95
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8f 77       	andi	r24, 0x7F	; 127
     d06:	8c 93       	st	X, r24
}
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <EXTI_voidInit>:
static void (*Global_pvInt1NotifcationFunction)(void) = NULL;
static void (*Global_pvInt2NotifcationFunction)(void) = NULL;

/*********************FUNCTIONS DEFINITIONS******************************/
void EXTI_voidInit (void)
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
	#if	EXTI_INT0_ENALBE == ENABLE
		SET_BIT(GICR, GICR_INT0);
     d16:	ab e5       	ldi	r26, 0x5B	; 91
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	eb e5       	ldi	r30, 0x5B	; 91
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	80 64       	ori	r24, 0x40	; 64
     d22:	8c 93       	st	X, r24
			SET_BIT(MCUCR, MCUCR_ISC00);
		#elif EXTI_INT0_SENSE_CONTROL == FALLING_EDGE
			SET_BIT(MCUCR, MCUCR_ISC01);
			CLR_BIT(MCUCR, MCUCR_ISC00);
		#elif EXTI_INT0_SENSE_CONTROL == RISING_EDGE
			SET_BIT(MCUCR, MCUCR_ISC01);
     d24:	a5 e5       	ldi	r26, 0x55	; 85
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e5 e5       	ldi	r30, 0x55	; 85
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	82 60       	ori	r24, 0x02	; 2
     d30:	8c 93       	st	X, r24
			SET_BIT(MCUCR, MCUCR_ISC00);
     d32:	a5 e5       	ldi	r26, 0x55	; 85
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e5 e5       	ldi	r30, 0x55	; 85
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	81 60       	ori	r24, 0x01	; 1
     d3e:	8c 93       	st	X, r24
		#error "EXTI_INT0_ENALBE Error Configuration"
	#endif


	#if	EXTI_INT1_ENALBE == ENALBE
		SET_BIT(GICR, GICR_INT1);
     d40:	ab e5       	ldi	r26, 0x5B	; 91
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	eb e5       	ldi	r30, 0x5B	; 91
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	80 68       	ori	r24, 0x80	; 128
     d4c:	8c 93       	st	X, r24
			SET_BIT(MCUCR, MCUCR_ISC10);
		#elif EXTI_INT1_SENSE_CONTROL == FALLING_EDGE
			SET_BIT(MCUCR, MCUCR_ISC11);
			CLR_BIT(MCUCR, MCUCR_ISC10);
		#elif EXTI_INT1_SENSE_CONTROL == RISING_EDGE
			SET_BIT(MCUCR, MCUCR_ISC11);
     d4e:	a5 e5       	ldi	r26, 0x55	; 85
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e5 e5       	ldi	r30, 0x55	; 85
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	88 60       	ori	r24, 0x08	; 8
     d5a:	8c 93       	st	X, r24
			SET_BIT(MCUCR, MCUCR_ISC10);
     d5c:	a5 e5       	ldi	r26, 0x55	; 85
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e5 e5       	ldi	r30, 0x55	; 85
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	84 60       	ori	r24, 0x04	; 4
     d68:	8c 93       	st	X, r24
			SET_BIT(MCUCSR, MCUCSR_ISC2);
		#else
			#error "EXTI_INT2_CONTROL Error Configuration"
		#endif
	#elif EXTI_INT2_ENALBE == DISABLE
		CLR_BIT(GICR, GICR_INT2);
     d6a:	ab e5       	ldi	r26, 0x5B	; 91
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	eb e5       	ldi	r30, 0x5B	; 91
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	8f 7d       	andi	r24, 0xDF	; 223
     d76:	8c 93       	st	X, r24
	#else
		#error "EXTI_INT2_ENALBE Error Configuration"
	#endif
}
     d78:	cf 91       	pop	r28
     d7a:	df 91       	pop	r29
     d7c:	08 95       	ret

00000d7e <EXTI_u8SetInt0SenseControl>:


u8 EXTI_u8SetInt0SenseControl (u8 Copy_u8SenseControl)
{
     d7e:	df 93       	push	r29
     d80:	cf 93       	push	r28
     d82:	00 d0       	rcall	.+0      	; 0xd84 <EXTI_u8SetInt0SenseControl+0x6>
     d84:	00 d0       	rcall	.+0      	; 0xd86 <EXTI_u8SetInt0SenseControl+0x8>
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
     d8a:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8SenseControl)
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	3c 83       	std	Y+4, r19	; 0x04
     d94:	2b 83       	std	Y+3, r18	; 0x03
     d96:	8b 81       	ldd	r24, Y+3	; 0x03
     d98:	9c 81       	ldd	r25, Y+4	; 0x04
     d9a:	81 30       	cpi	r24, 0x01	; 1
     d9c:	91 05       	cpc	r25, r1
     d9e:	09 f4       	brne	.+2      	; 0xda2 <EXTI_u8SetInt0SenseControl+0x24>
     da0:	42 c0       	rjmp	.+132    	; 0xe26 <EXTI_u8SetInt0SenseControl+0xa8>
     da2:	2b 81       	ldd	r18, Y+3	; 0x03
     da4:	3c 81       	ldd	r19, Y+4	; 0x04
     da6:	22 30       	cpi	r18, 0x02	; 2
     da8:	31 05       	cpc	r19, r1
     daa:	2c f4       	brge	.+10     	; 0xdb6 <EXTI_u8SetInt0SenseControl+0x38>
     dac:	8b 81       	ldd	r24, Y+3	; 0x03
     dae:	9c 81       	ldd	r25, Y+4	; 0x04
     db0:	00 97       	sbiw	r24, 0x00	; 0
     db2:	51 f1       	breq	.+84     	; 0xe08 <EXTI_u8SetInt0SenseControl+0x8a>
     db4:	47 c0       	rjmp	.+142    	; 0xe44 <EXTI_u8SetInt0SenseControl+0xc6>
     db6:	2b 81       	ldd	r18, Y+3	; 0x03
     db8:	3c 81       	ldd	r19, Y+4	; 0x04
     dba:	22 30       	cpi	r18, 0x02	; 2
     dbc:	31 05       	cpc	r19, r1
     dbe:	31 f0       	breq	.+12     	; 0xdcc <EXTI_u8SetInt0SenseControl+0x4e>
     dc0:	8b 81       	ldd	r24, Y+3	; 0x03
     dc2:	9c 81       	ldd	r25, Y+4	; 0x04
     dc4:	83 30       	cpi	r24, 0x03	; 3
     dc6:	91 05       	cpc	r25, r1
     dc8:	81 f0       	breq	.+32     	; 0xdea <EXTI_u8SetInt0SenseControl+0x6c>
     dca:	3c c0       	rjmp	.+120    	; 0xe44 <EXTI_u8SetInt0SenseControl+0xc6>
	{
		case LOW_LEVEL:
		{
			CLR_BIT(MCUCR, MCUCR_ISC01);
     dcc:	a5 e5       	ldi	r26, 0x55	; 85
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	e5 e5       	ldi	r30, 0x55	; 85
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	8d 7f       	andi	r24, 0xFD	; 253
     dd8:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, MCUCR_ISC00);
     dda:	a5 e5       	ldi	r26, 0x55	; 85
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e5 e5       	ldi	r30, 0x55	; 85
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	8e 7f       	andi	r24, 0xFE	; 254
     de6:	8c 93       	st	X, r24
     de8:	30 c0       	rjmp	.+96     	; 0xe4a <EXTI_u8SetInt0SenseControl+0xcc>
			break;
		}
		case ON_CHANGE:
		{
			CLR_BIT(MCUCR, MCUCR_ISC01);
     dea:	a5 e5       	ldi	r26, 0x55	; 85
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e5 e5       	ldi	r30, 0x55	; 85
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	8d 7f       	andi	r24, 0xFD	; 253
     df6:	8c 93       	st	X, r24
			SET_BIT(MCUCR, MCUCR_ISC00);
     df8:	a5 e5       	ldi	r26, 0x55	; 85
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	e5 e5       	ldi	r30, 0x55	; 85
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	81 60       	ori	r24, 0x01	; 1
     e04:	8c 93       	st	X, r24
     e06:	21 c0       	rjmp	.+66     	; 0xe4a <EXTI_u8SetInt0SenseControl+0xcc>
			break;
		}
		case FALLING_EDGE:
		{
			SET_BIT(MCUCR, MCUCR_ISC01);
     e08:	a5 e5       	ldi	r26, 0x55	; 85
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e5 e5       	ldi	r30, 0x55	; 85
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	82 60       	ori	r24, 0x02	; 2
     e14:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, MCUCR_ISC00);
     e16:	a5 e5       	ldi	r26, 0x55	; 85
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e5 e5       	ldi	r30, 0x55	; 85
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	8e 7f       	andi	r24, 0xFE	; 254
     e22:	8c 93       	st	X, r24
     e24:	12 c0       	rjmp	.+36     	; 0xe4a <EXTI_u8SetInt0SenseControl+0xcc>
			break;
		}
		case RISING_EDGE:
		{
			SET_BIT(MCUCR, MCUCR_ISC01);
     e26:	a5 e5       	ldi	r26, 0x55	; 85
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e5 e5       	ldi	r30, 0x55	; 85
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	82 60       	ori	r24, 0x02	; 2
     e32:	8c 93       	st	X, r24
			SET_BIT(MCUCR, MCUCR_ISC00);
     e34:	a5 e5       	ldi	r26, 0x55	; 85
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e5 e5       	ldi	r30, 0x55	; 85
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	81 60       	ori	r24, 0x01	; 1
     e40:	8c 93       	st	X, r24
     e42:	03 c0       	rjmp	.+6      	; 0xe4a <EXTI_u8SetInt0SenseControl+0xcc>
			break;
		}
		default:
		{
			return E_NOK;
     e44:	91 e0       	ldi	r25, 0x01	; 1
     e46:	9a 83       	std	Y+2, r25	; 0x02
     e48:	08 c0       	rjmp	.+16     	; 0xe5a <EXTI_u8SetInt0SenseControl+0xdc>
		}
	}
	SET_BIT(GICR, GICR_INT0);
     e4a:	ab e5       	ldi	r26, 0x5B	; 91
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	eb e5       	ldi	r30, 0x5B	; 91
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	80 64       	ori	r24, 0x40	; 64
     e56:	8c 93       	st	X, r24
	return E_OK;
     e58:	1a 82       	std	Y+2, r1	; 0x02
     e5a:	8a 81       	ldd	r24, Y+2	; 0x02
}
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	0f 90       	pop	r0
     e62:	0f 90       	pop	r0
     e64:	cf 91       	pop	r28
     e66:	df 91       	pop	r29
     e68:	08 95       	ret

00000e6a <EXTI_u8SetInt1SenseControl>:

u8 EXTI_u8SetInt1SenseControl(u8 Copy_u8SenseControl)
{
     e6a:	df 93       	push	r29
     e6c:	cf 93       	push	r28
     e6e:	00 d0       	rcall	.+0      	; 0xe70 <EXTI_u8SetInt1SenseControl+0x6>
     e70:	00 d0       	rcall	.+0      	; 0xe72 <EXTI_u8SetInt1SenseControl+0x8>
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
     e76:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8SenseControl)
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	28 2f       	mov	r18, r24
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	3c 83       	std	Y+4, r19	; 0x04
     e80:	2b 83       	std	Y+3, r18	; 0x03
     e82:	8b 81       	ldd	r24, Y+3	; 0x03
     e84:	9c 81       	ldd	r25, Y+4	; 0x04
     e86:	81 30       	cpi	r24, 0x01	; 1
     e88:	91 05       	cpc	r25, r1
     e8a:	09 f4       	brne	.+2      	; 0xe8e <EXTI_u8SetInt1SenseControl+0x24>
     e8c:	42 c0       	rjmp	.+132    	; 0xf12 <EXTI_u8SetInt1SenseControl+0xa8>
     e8e:	2b 81       	ldd	r18, Y+3	; 0x03
     e90:	3c 81       	ldd	r19, Y+4	; 0x04
     e92:	22 30       	cpi	r18, 0x02	; 2
     e94:	31 05       	cpc	r19, r1
     e96:	2c f4       	brge	.+10     	; 0xea2 <EXTI_u8SetInt1SenseControl+0x38>
     e98:	8b 81       	ldd	r24, Y+3	; 0x03
     e9a:	9c 81       	ldd	r25, Y+4	; 0x04
     e9c:	00 97       	sbiw	r24, 0x00	; 0
     e9e:	51 f1       	breq	.+84     	; 0xef4 <EXTI_u8SetInt1SenseControl+0x8a>
     ea0:	47 c0       	rjmp	.+142    	; 0xf30 <EXTI_u8SetInt1SenseControl+0xc6>
     ea2:	2b 81       	ldd	r18, Y+3	; 0x03
     ea4:	3c 81       	ldd	r19, Y+4	; 0x04
     ea6:	22 30       	cpi	r18, 0x02	; 2
     ea8:	31 05       	cpc	r19, r1
     eaa:	31 f0       	breq	.+12     	; 0xeb8 <EXTI_u8SetInt1SenseControl+0x4e>
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	9c 81       	ldd	r25, Y+4	; 0x04
     eb0:	83 30       	cpi	r24, 0x03	; 3
     eb2:	91 05       	cpc	r25, r1
     eb4:	81 f0       	breq	.+32     	; 0xed6 <EXTI_u8SetInt1SenseControl+0x6c>
     eb6:	3c c0       	rjmp	.+120    	; 0xf30 <EXTI_u8SetInt1SenseControl+0xc6>
	{
	case LOW_LEVEL:
	{
		CLR_BIT(MCUCR, MCUCR_ISC11);
     eb8:	a5 e5       	ldi	r26, 0x55	; 85
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e5 e5       	ldi	r30, 0x55	; 85
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	87 7f       	andi	r24, 0xF7	; 247
     ec4:	8c 93       	st	X, r24
		CLR_BIT(MCUCR, MCUCR_ISC10);
     ec6:	a5 e5       	ldi	r26, 0x55	; 85
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	e5 e5       	ldi	r30, 0x55	; 85
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	8b 7f       	andi	r24, 0xFB	; 251
     ed2:	8c 93       	st	X, r24
     ed4:	30 c0       	rjmp	.+96     	; 0xf36 <EXTI_u8SetInt1SenseControl+0xcc>
		break;
	}
	case ON_CHANGE:
	{
		CLR_BIT(MCUCR, MCUCR_ISC11);
     ed6:	a5 e5       	ldi	r26, 0x55	; 85
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e5 e5       	ldi	r30, 0x55	; 85
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	87 7f       	andi	r24, 0xF7	; 247
     ee2:	8c 93       	st	X, r24
		SET_BIT(MCUCR, MCUCR_ISC10);
     ee4:	a5 e5       	ldi	r26, 0x55	; 85
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e5 e5       	ldi	r30, 0x55	; 85
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	84 60       	ori	r24, 0x04	; 4
     ef0:	8c 93       	st	X, r24
     ef2:	21 c0       	rjmp	.+66     	; 0xf36 <EXTI_u8SetInt1SenseControl+0xcc>
		break;
	}
	case FALLING_EDGE:
	{
		SET_BIT(MCUCR, MCUCR_ISC11);
     ef4:	a5 e5       	ldi	r26, 0x55	; 85
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e5 e5       	ldi	r30, 0x55	; 85
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	88 60       	ori	r24, 0x08	; 8
     f00:	8c 93       	st	X, r24
		CLR_BIT(MCUCR, MCUCR_ISC10);
     f02:	a5 e5       	ldi	r26, 0x55	; 85
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e5 e5       	ldi	r30, 0x55	; 85
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	8b 7f       	andi	r24, 0xFB	; 251
     f0e:	8c 93       	st	X, r24
     f10:	12 c0       	rjmp	.+36     	; 0xf36 <EXTI_u8SetInt1SenseControl+0xcc>
		break;
	}
	case RISING_EDGE:
	{
		SET_BIT(MCUCR, MCUCR_ISC11);
     f12:	a5 e5       	ldi	r26, 0x55	; 85
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e5 e5       	ldi	r30, 0x55	; 85
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	88 60       	ori	r24, 0x08	; 8
     f1e:	8c 93       	st	X, r24
		SET_BIT(MCUCR, MCUCR_ISC10);
     f20:	a5 e5       	ldi	r26, 0x55	; 85
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e5 e5       	ldi	r30, 0x55	; 85
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	84 60       	ori	r24, 0x04	; 4
     f2c:	8c 93       	st	X, r24
     f2e:	03 c0       	rjmp	.+6      	; 0xf36 <EXTI_u8SetInt1SenseControl+0xcc>
		break;
	}
	default:
	{
		return E_NOK;
     f30:	91 e0       	ldi	r25, 0x01	; 1
     f32:	9a 83       	std	Y+2, r25	; 0x02
     f34:	08 c0       	rjmp	.+16     	; 0xf46 <EXTI_u8SetInt1SenseControl+0xdc>
	}
	}
	SET_BIT(GICR, GICR_INT1);
     f36:	ab e5       	ldi	r26, 0x5B	; 91
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	eb e5       	ldi	r30, 0x5B	; 91
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	80 68       	ori	r24, 0x80	; 128
     f42:	8c 93       	st	X, r24
	return E_OK;
     f44:	1a 82       	std	Y+2, r1	; 0x02
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
}
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	08 95       	ret

00000f56 <EXTI_u8SetInt2SenseControl>:

u8 EXTI_u8SetInt2SenseControl(u8 Copy_u8SenseControl)
{
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	00 d0       	rcall	.+0      	; 0xf5c <EXTI_u8SetInt2SenseControl+0x6>
     f5c:	00 d0       	rcall	.+0      	; 0xf5e <EXTI_u8SetInt2SenseControl+0x8>
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
     f62:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8SenseControl)
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	3c 83       	std	Y+4, r19	; 0x04
     f6c:	2b 83       	std	Y+3, r18	; 0x03
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	9c 81       	ldd	r25, Y+4	; 0x04
     f72:	00 97       	sbiw	r24, 0x00	; 0
     f74:	31 f0       	breq	.+12     	; 0xf82 <EXTI_u8SetInt2SenseControl+0x2c>
     f76:	2b 81       	ldd	r18, Y+3	; 0x03
     f78:	3c 81       	ldd	r19, Y+4	; 0x04
     f7a:	21 30       	cpi	r18, 0x01	; 1
     f7c:	31 05       	cpc	r19, r1
     f7e:	49 f0       	breq	.+18     	; 0xf92 <EXTI_u8SetInt2SenseControl+0x3c>
     f80:	10 c0       	rjmp	.+32     	; 0xfa2 <EXTI_u8SetInt2SenseControl+0x4c>
	{
	case FALLING_EDGE:
	{
		CLR_BIT(MCUCSR, MCUCSR_ISC2);
     f82:	a4 e5       	ldi	r26, 0x54	; 84
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e4 e5       	ldi	r30, 0x54	; 84
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	8f 7b       	andi	r24, 0xBF	; 191
     f8e:	8c 93       	st	X, r24
     f90:	0b c0       	rjmp	.+22     	; 0xfa8 <EXTI_u8SetInt2SenseControl+0x52>
		break;
	}
	case RISING_EDGE:
	{
		SET_BIT(MCUCSR, MCUCSR_ISC2);
     f92:	a4 e5       	ldi	r26, 0x54	; 84
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e4 e5       	ldi	r30, 0x54	; 84
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	80 64       	ori	r24, 0x40	; 64
     f9e:	8c 93       	st	X, r24
     fa0:	03 c0       	rjmp	.+6      	; 0xfa8 <EXTI_u8SetInt2SenseControl+0x52>
		break;
	}
	default:
	{
		return E_NOK;
     fa2:	31 e0       	ldi	r19, 0x01	; 1
     fa4:	3a 83       	std	Y+2, r19	; 0x02
     fa6:	08 c0       	rjmp	.+16     	; 0xfb8 <EXTI_u8SetInt2SenseControl+0x62>
	}
	}
	SET_BIT(GICR, GICR_INT2);
     fa8:	ab e5       	ldi	r26, 0x5B	; 91
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	eb e5       	ldi	r30, 0x5B	; 91
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	80 62       	ori	r24, 0x20	; 32
     fb4:	8c 93       	st	X, r24
	return E_OK;
     fb6:	1a 82       	std	Y+2, r1	; 0x02
     fb8:	8a 81       	ldd	r24, Y+2	; 0x02
}
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	08 95       	ret

00000fc8 <EXTI_u8Int0SetCallBack>:


u8 EXTI_u8Int0SetCallBack (void (*Copy_pvNotificationFunction) (void))
{
     fc8:	df 93       	push	r29
     fca:	cf 93       	push	r28
     fcc:	00 d0       	rcall	.+0      	; 0xfce <EXTI_u8Int0SetCallBack+0x6>
     fce:	0f 92       	push	r0
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
     fd4:	9a 83       	std	Y+2, r25	; 0x02
     fd6:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_pvNotificationFunction != NULL)
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	9a 81       	ldd	r25, Y+2	; 0x02
     fdc:	00 97       	sbiw	r24, 0x00	; 0
     fde:	41 f0       	breq	.+16     	; 0xff0 <EXTI_u8Int0SetCallBack+0x28>
	{
		Global_pvInt0NotifcationFunction = Copy_pvNotificationFunction;
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	9a 81       	ldd	r25, Y+2	; 0x02
     fe4:	90 93 e1 01 	sts	0x01E1, r25
     fe8:	80 93 e0 01 	sts	0x01E0, r24
		return E_OK;
     fec:	1b 82       	std	Y+3, r1	; 0x03
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <EXTI_u8Int0SetCallBack+0x2c>
	}
	else
	{
		return E_NOK;
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	8b 83       	std	Y+3, r24	; 0x03
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	cf 91       	pop	r28
     ffe:	df 91       	pop	r29
    1000:	08 95       	ret

00001002 <__vector_1>:

/*ISR for INT0*/
void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
    1002:	1f 92       	push	r1
    1004:	0f 92       	push	r0
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	0f 92       	push	r0
    100a:	11 24       	eor	r1, r1
    100c:	2f 93       	push	r18
    100e:	3f 93       	push	r19
    1010:	4f 93       	push	r20
    1012:	5f 93       	push	r21
    1014:	6f 93       	push	r22
    1016:	7f 93       	push	r23
    1018:	8f 93       	push	r24
    101a:	9f 93       	push	r25
    101c:	af 93       	push	r26
    101e:	bf 93       	push	r27
    1020:	ef 93       	push	r30
    1022:	ff 93       	push	r31
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
	if (Global_pvInt0NotifcationFunction != NULL)
    102c:	80 91 e0 01 	lds	r24, 0x01E0
    1030:	90 91 e1 01 	lds	r25, 0x01E1
    1034:	00 97       	sbiw	r24, 0x00	; 0
    1036:	29 f0       	breq	.+10     	; 0x1042 <__vector_1+0x40>
	{
		Global_pvInt0NotifcationFunction();
    1038:	e0 91 e0 01 	lds	r30, 0x01E0
    103c:	f0 91 e1 01 	lds	r31, 0x01E1
    1040:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    1042:	cf 91       	pop	r28
    1044:	df 91       	pop	r29
    1046:	ff 91       	pop	r31
    1048:	ef 91       	pop	r30
    104a:	bf 91       	pop	r27
    104c:	af 91       	pop	r26
    104e:	9f 91       	pop	r25
    1050:	8f 91       	pop	r24
    1052:	7f 91       	pop	r23
    1054:	6f 91       	pop	r22
    1056:	5f 91       	pop	r21
    1058:	4f 91       	pop	r20
    105a:	3f 91       	pop	r19
    105c:	2f 91       	pop	r18
    105e:	0f 90       	pop	r0
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	0f 90       	pop	r0
    1064:	1f 90       	pop	r1
    1066:	18 95       	reti

00001068 <EXTI_u8Int1SetCallBack>:

u8 EXTI_u8Int1SetCallBack (void (*Copy_pvNotificationFunction) (void))
{
    1068:	df 93       	push	r29
    106a:	cf 93       	push	r28
    106c:	00 d0       	rcall	.+0      	; 0x106e <EXTI_u8Int1SetCallBack+0x6>
    106e:	0f 92       	push	r0
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
    1074:	9a 83       	std	Y+2, r25	; 0x02
    1076:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_pvNotificationFunction != NULL)
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	9a 81       	ldd	r25, Y+2	; 0x02
    107c:	00 97       	sbiw	r24, 0x00	; 0
    107e:	41 f0       	breq	.+16     	; 0x1090 <EXTI_u8Int1SetCallBack+0x28>
	{
		Global_pvInt1NotifcationFunction = Copy_pvNotificationFunction;
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	9a 81       	ldd	r25, Y+2	; 0x02
    1084:	90 93 e3 01 	sts	0x01E3, r25
    1088:	80 93 e2 01 	sts	0x01E2, r24
		return E_OK;
    108c:	1b 82       	std	Y+3, r1	; 0x03
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <EXTI_u8Int1SetCallBack+0x2c>
	}
	else
	{
		return E_NOK;
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	8b 83       	std	Y+3, r24	; 0x03
    1094:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	08 95       	ret

000010a2 <__vector_2>:

/*ISR for INT1*/
void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
    10a2:	1f 92       	push	r1
    10a4:	0f 92       	push	r0
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	0f 92       	push	r0
    10aa:	11 24       	eor	r1, r1
    10ac:	2f 93       	push	r18
    10ae:	3f 93       	push	r19
    10b0:	4f 93       	push	r20
    10b2:	5f 93       	push	r21
    10b4:	6f 93       	push	r22
    10b6:	7f 93       	push	r23
    10b8:	8f 93       	push	r24
    10ba:	9f 93       	push	r25
    10bc:	af 93       	push	r26
    10be:	bf 93       	push	r27
    10c0:	ef 93       	push	r30
    10c2:	ff 93       	push	r31
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
	if (Global_pvInt1NotifcationFunction != NULL)
    10cc:	80 91 e2 01 	lds	r24, 0x01E2
    10d0:	90 91 e3 01 	lds	r25, 0x01E3
    10d4:	00 97       	sbiw	r24, 0x00	; 0
    10d6:	29 f0       	breq	.+10     	; 0x10e2 <__vector_2+0x40>
	{
		Global_pvInt1NotifcationFunction();
    10d8:	e0 91 e2 01 	lds	r30, 0x01E2
    10dc:	f0 91 e3 01 	lds	r31, 0x01E3
    10e0:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    10e2:	cf 91       	pop	r28
    10e4:	df 91       	pop	r29
    10e6:	ff 91       	pop	r31
    10e8:	ef 91       	pop	r30
    10ea:	bf 91       	pop	r27
    10ec:	af 91       	pop	r26
    10ee:	9f 91       	pop	r25
    10f0:	8f 91       	pop	r24
    10f2:	7f 91       	pop	r23
    10f4:	6f 91       	pop	r22
    10f6:	5f 91       	pop	r21
    10f8:	4f 91       	pop	r20
    10fa:	3f 91       	pop	r19
    10fc:	2f 91       	pop	r18
    10fe:	0f 90       	pop	r0
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	0f 90       	pop	r0
    1104:	1f 90       	pop	r1
    1106:	18 95       	reti

00001108 <EXTI_u8Int2SetCallBack>:

u8 EXTI_u8Int2SetCallBack (void (*Copy_pvNotificationFunction) (void))
{
    1108:	df 93       	push	r29
    110a:	cf 93       	push	r28
    110c:	00 d0       	rcall	.+0      	; 0x110e <EXTI_u8Int2SetCallBack+0x6>
    110e:	0f 92       	push	r0
    1110:	cd b7       	in	r28, 0x3d	; 61
    1112:	de b7       	in	r29, 0x3e	; 62
    1114:	9a 83       	std	Y+2, r25	; 0x02
    1116:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_pvNotificationFunction != NULL)
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	9a 81       	ldd	r25, Y+2	; 0x02
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	41 f0       	breq	.+16     	; 0x1130 <EXTI_u8Int2SetCallBack+0x28>
	{
		Global_pvInt2NotifcationFunction = Copy_pvNotificationFunction;
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	9a 81       	ldd	r25, Y+2	; 0x02
    1124:	90 93 e5 01 	sts	0x01E5, r25
    1128:	80 93 e4 01 	sts	0x01E4, r24
		return E_OK;
    112c:	1b 82       	std	Y+3, r1	; 0x03
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <EXTI_u8Int2SetCallBack+0x2c>
	}
	else
	{
		return E_NOK;
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	8b 83       	std	Y+3, r24	; 0x03
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	cf 91       	pop	r28
    113e:	df 91       	pop	r29
    1140:	08 95       	ret

00001142 <__vector_3>:

/*ISR for INT2*/
void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
    1142:	1f 92       	push	r1
    1144:	0f 92       	push	r0
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	0f 92       	push	r0
    114a:	11 24       	eor	r1, r1
    114c:	2f 93       	push	r18
    114e:	3f 93       	push	r19
    1150:	4f 93       	push	r20
    1152:	5f 93       	push	r21
    1154:	6f 93       	push	r22
    1156:	7f 93       	push	r23
    1158:	8f 93       	push	r24
    115a:	9f 93       	push	r25
    115c:	af 93       	push	r26
    115e:	bf 93       	push	r27
    1160:	ef 93       	push	r30
    1162:	ff 93       	push	r31
    1164:	df 93       	push	r29
    1166:	cf 93       	push	r28
    1168:	cd b7       	in	r28, 0x3d	; 61
    116a:	de b7       	in	r29, 0x3e	; 62
	if (Global_pvInt2NotifcationFunction != NULL)
    116c:	80 91 e4 01 	lds	r24, 0x01E4
    1170:	90 91 e5 01 	lds	r25, 0x01E5
    1174:	00 97       	sbiw	r24, 0x00	; 0
    1176:	29 f0       	breq	.+10     	; 0x1182 <__vector_3+0x40>
	{
		Global_pvInt2NotifcationFunction();
    1178:	e0 91 e4 01 	lds	r30, 0x01E4
    117c:	f0 91 e5 01 	lds	r31, 0x01E5
    1180:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    1182:	cf 91       	pop	r28
    1184:	df 91       	pop	r29
    1186:	ff 91       	pop	r31
    1188:	ef 91       	pop	r30
    118a:	bf 91       	pop	r27
    118c:	af 91       	pop	r26
    118e:	9f 91       	pop	r25
    1190:	8f 91       	pop	r24
    1192:	7f 91       	pop	r23
    1194:	6f 91       	pop	r22
    1196:	5f 91       	pop	r21
    1198:	4f 91       	pop	r20
    119a:	3f 91       	pop	r19
    119c:	2f 91       	pop	r18
    119e:	0f 90       	pop	r0
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	0f 90       	pop	r0
    11a4:	1f 90       	pop	r1
    11a6:	18 95       	reti

000011a8 <DIO_Vid_SetPinDirection>:



								/*Setting pin Direction*/
/*Setting pin direction, make a specific pin is an input(DDRX=0) or output(DDRX=1)*/
void DIO_Vid_SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction){
    11a8:	df 93       	push	r29
    11aa:	cf 93       	push	r28
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	27 97       	sbiw	r28, 0x07	; 7
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	f8 94       	cli
    11b6:	de bf       	out	0x3e, r29	; 62
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	cd bf       	out	0x3d, r28	; 61
    11bc:	89 83       	std	Y+1, r24	; 0x01
    11be:	6a 83       	std	Y+2, r22	; 0x02
    11c0:	4b 83       	std	Y+3, r20	; 0x03

	if(Copy_u8Direction == input){
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	88 23       	and	r24, r24
    11c6:	09 f0       	breq	.+2      	; 0x11ca <DIO_Vid_SetPinDirection+0x22>
    11c8:	74 c0       	rjmp	.+232    	; 0x12b2 <DIO_Vid_SetPinDirection+0x10a>
		switch (Copy_u8Port){
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	3f 83       	std	Y+7, r19	; 0x07
    11d2:	2e 83       	std	Y+6, r18	; 0x06
    11d4:	8e 81       	ldd	r24, Y+6	; 0x06
    11d6:	9f 81       	ldd	r25, Y+7	; 0x07
    11d8:	81 30       	cpi	r24, 0x01	; 1
    11da:	91 05       	cpc	r25, r1
    11dc:	59 f1       	breq	.+86     	; 0x1234 <DIO_Vid_SetPinDirection+0x8c>
    11de:	2e 81       	ldd	r18, Y+6	; 0x06
    11e0:	3f 81       	ldd	r19, Y+7	; 0x07
    11e2:	22 30       	cpi	r18, 0x02	; 2
    11e4:	31 05       	cpc	r19, r1
    11e6:	2c f4       	brge	.+10     	; 0x11f2 <DIO_Vid_SetPinDirection+0x4a>
    11e8:	8e 81       	ldd	r24, Y+6	; 0x06
    11ea:	9f 81       	ldd	r25, Y+7	; 0x07
    11ec:	00 97       	sbiw	r24, 0x00	; 0
    11ee:	69 f0       	breq	.+26     	; 0x120a <DIO_Vid_SetPinDirection+0x62>
    11f0:	d2 c0       	rjmp	.+420    	; 0x1396 <DIO_Vid_SetPinDirection+0x1ee>
    11f2:	2e 81       	ldd	r18, Y+6	; 0x06
    11f4:	3f 81       	ldd	r19, Y+7	; 0x07
    11f6:	22 30       	cpi	r18, 0x02	; 2
    11f8:	31 05       	cpc	r19, r1
    11fa:	89 f1       	breq	.+98     	; 0x125e <DIO_Vid_SetPinDirection+0xb6>
    11fc:	8e 81       	ldd	r24, Y+6	; 0x06
    11fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1200:	83 30       	cpi	r24, 0x03	; 3
    1202:	91 05       	cpc	r25, r1
    1204:	09 f4       	brne	.+2      	; 0x1208 <DIO_Vid_SetPinDirection+0x60>
    1206:	40 c0       	rjmp	.+128    	; 0x1288 <DIO_Vid_SetPinDirection+0xe0>
    1208:	c6 c0       	rjmp	.+396    	; 0x1396 <DIO_Vid_SetPinDirection+0x1ee>
			case Port_A : CLR_BIT(DDRA , Copy_u8Pin); break;
    120a:	aa e3       	ldi	r26, 0x3A	; 58
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	ea e3       	ldi	r30, 0x3A	; 58
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <DIO_Vid_SetPinDirection+0x80>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <DIO_Vid_SetPinDirection+0x7c>
    122c:	80 95       	com	r24
    122e:	84 23       	and	r24, r20
    1230:	8c 93       	st	X, r24
    1232:	b1 c0       	rjmp	.+354    	; 0x1396 <DIO_Vid_SetPinDirection+0x1ee>
			case Port_B : CLR_BIT(DDRB , Copy_u8Pin); break;
    1234:	a7 e3       	ldi	r26, 0x37	; 55
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	e7 e3       	ldi	r30, 0x37	; 55
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	48 2f       	mov	r20, r24
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	02 2e       	mov	r0, r18
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <DIO_Vid_SetPinDirection+0xaa>
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	0a 94       	dec	r0
    1254:	e2 f7       	brpl	.-8      	; 0x124e <DIO_Vid_SetPinDirection+0xa6>
    1256:	80 95       	com	r24
    1258:	84 23       	and	r24, r20
    125a:	8c 93       	st	X, r24
    125c:	9c c0       	rjmp	.+312    	; 0x1396 <DIO_Vid_SetPinDirection+0x1ee>
			case Port_C : CLR_BIT(DDRC , Copy_u8Pin); break;
    125e:	a4 e3       	ldi	r26, 0x34	; 52
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e4 e3       	ldi	r30, 0x34	; 52
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	48 2f       	mov	r20, r24
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	02 2e       	mov	r0, r18
    1276:	02 c0       	rjmp	.+4      	; 0x127c <DIO_Vid_SetPinDirection+0xd4>
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	0a 94       	dec	r0
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <DIO_Vid_SetPinDirection+0xd0>
    1280:	80 95       	com	r24
    1282:	84 23       	and	r24, r20
    1284:	8c 93       	st	X, r24
    1286:	87 c0       	rjmp	.+270    	; 0x1396 <DIO_Vid_SetPinDirection+0x1ee>
			case Port_D : CLR_BIT(DDRD , Copy_u8Pin); break;
    1288:	a1 e3       	ldi	r26, 0x31	; 49
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e1 e3       	ldi	r30, 0x31	; 49
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	48 2f       	mov	r20, r24
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	02 2e       	mov	r0, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <DIO_Vid_SetPinDirection+0xfe>
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	0a 94       	dec	r0
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <DIO_Vid_SetPinDirection+0xfa>
    12aa:	80 95       	com	r24
    12ac:	84 23       	and	r24, r20
    12ae:	8c 93       	st	X, r24
    12b0:	72 c0       	rjmp	.+228    	; 0x1396 <DIO_Vid_SetPinDirection+0x1ee>

		}
	}
	else if(Copy_u8Direction == output){
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	81 30       	cpi	r24, 0x01	; 1
    12b6:	09 f0       	breq	.+2      	; 0x12ba <DIO_Vid_SetPinDirection+0x112>
    12b8:	6e c0       	rjmp	.+220    	; 0x1396 <DIO_Vid_SetPinDirection+0x1ee>
		switch (Copy_u8Port){
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	3d 83       	std	Y+5, r19	; 0x05
    12c2:	2c 83       	std	Y+4, r18	; 0x04
    12c4:	8c 81       	ldd	r24, Y+4	; 0x04
    12c6:	9d 81       	ldd	r25, Y+5	; 0x05
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	91 05       	cpc	r25, r1
    12cc:	49 f1       	breq	.+82     	; 0x1320 <DIO_Vid_SetPinDirection+0x178>
    12ce:	2c 81       	ldd	r18, Y+4	; 0x04
    12d0:	3d 81       	ldd	r19, Y+5	; 0x05
    12d2:	22 30       	cpi	r18, 0x02	; 2
    12d4:	31 05       	cpc	r19, r1
    12d6:	2c f4       	brge	.+10     	; 0x12e2 <DIO_Vid_SetPinDirection+0x13a>
    12d8:	8c 81       	ldd	r24, Y+4	; 0x04
    12da:	9d 81       	ldd	r25, Y+5	; 0x05
    12dc:	00 97       	sbiw	r24, 0x00	; 0
    12de:	61 f0       	breq	.+24     	; 0x12f8 <DIO_Vid_SetPinDirection+0x150>
    12e0:	5a c0       	rjmp	.+180    	; 0x1396 <DIO_Vid_SetPinDirection+0x1ee>
    12e2:	2c 81       	ldd	r18, Y+4	; 0x04
    12e4:	3d 81       	ldd	r19, Y+5	; 0x05
    12e6:	22 30       	cpi	r18, 0x02	; 2
    12e8:	31 05       	cpc	r19, r1
    12ea:	71 f1       	breq	.+92     	; 0x1348 <DIO_Vid_SetPinDirection+0x1a0>
    12ec:	8c 81       	ldd	r24, Y+4	; 0x04
    12ee:	9d 81       	ldd	r25, Y+5	; 0x05
    12f0:	83 30       	cpi	r24, 0x03	; 3
    12f2:	91 05       	cpc	r25, r1
    12f4:	e9 f1       	breq	.+122    	; 0x1370 <DIO_Vid_SetPinDirection+0x1c8>
    12f6:	4f c0       	rjmp	.+158    	; 0x1396 <DIO_Vid_SetPinDirection+0x1ee>
			case Port_A : SET_BIT(DDRA , Copy_u8Pin); break;
    12f8:	aa e3       	ldi	r26, 0x3A	; 58
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	ea e3       	ldi	r30, 0x3A	; 58
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	48 2f       	mov	r20, r24
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	02 2e       	mov	r0, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <DIO_Vid_SetPinDirection+0x16e>
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	0a 94       	dec	r0
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <DIO_Vid_SetPinDirection+0x16a>
    131a:	84 2b       	or	r24, r20
    131c:	8c 93       	st	X, r24
    131e:	3b c0       	rjmp	.+118    	; 0x1396 <DIO_Vid_SetPinDirection+0x1ee>
			case Port_B : SET_BIT(DDRB , Copy_u8Pin); break;
    1320:	a7 e3       	ldi	r26, 0x37	; 55
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e7 e3       	ldi	r30, 0x37	; 55
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	48 2f       	mov	r20, r24
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	02 2e       	mov	r0, r18
    1338:	02 c0       	rjmp	.+4      	; 0x133e <DIO_Vid_SetPinDirection+0x196>
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	0a 94       	dec	r0
    1340:	e2 f7       	brpl	.-8      	; 0x133a <DIO_Vid_SetPinDirection+0x192>
    1342:	84 2b       	or	r24, r20
    1344:	8c 93       	st	X, r24
    1346:	27 c0       	rjmp	.+78     	; 0x1396 <DIO_Vid_SetPinDirection+0x1ee>
			case Port_C : SET_BIT(DDRC , Copy_u8Pin); break;
    1348:	a4 e3       	ldi	r26, 0x34	; 52
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	e4 e3       	ldi	r30, 0x34	; 52
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	48 2f       	mov	r20, r24
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	28 2f       	mov	r18, r24
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	02 2e       	mov	r0, r18
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <DIO_Vid_SetPinDirection+0x1be>
    1362:	88 0f       	add	r24, r24
    1364:	99 1f       	adc	r25, r25
    1366:	0a 94       	dec	r0
    1368:	e2 f7       	brpl	.-8      	; 0x1362 <DIO_Vid_SetPinDirection+0x1ba>
    136a:	84 2b       	or	r24, r20
    136c:	8c 93       	st	X, r24
    136e:	13 c0       	rjmp	.+38     	; 0x1396 <DIO_Vid_SetPinDirection+0x1ee>
			case Port_D : SET_BIT(DDRD , Copy_u8Pin); break;
    1370:	a1 e3       	ldi	r26, 0x31	; 49
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	e1 e3       	ldi	r30, 0x31	; 49
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	48 2f       	mov	r20, r24
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	02 2e       	mov	r0, r18
    1388:	02 c0       	rjmp	.+4      	; 0x138e <DIO_Vid_SetPinDirection+0x1e6>
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	0a 94       	dec	r0
    1390:	e2 f7       	brpl	.-8      	; 0x138a <DIO_Vid_SetPinDirection+0x1e2>
    1392:	84 2b       	or	r24, r20
    1394:	8c 93       	st	X, r24

		}
	}

}
    1396:	27 96       	adiw	r28, 0x07	; 7
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	f8 94       	cli
    139c:	de bf       	out	0x3e, r29	; 62
    139e:	0f be       	out	0x3f, r0	; 63
    13a0:	cd bf       	out	0x3d, r28	; 61
    13a2:	cf 91       	pop	r28
    13a4:	df 91       	pop	r29
    13a6:	08 95       	ret

000013a8 <DIO_Vid_SetPinValue>:

                         /*Setting pin Value*/
/*Setting pin value, give a special value(high=1 or low=0) to specific pin */
void DIO_Vid_SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value){
    13a8:	df 93       	push	r29
    13aa:	cf 93       	push	r28
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	27 97       	sbiw	r28, 0x07	; 7
    13b2:	0f b6       	in	r0, 0x3f	; 63
    13b4:	f8 94       	cli
    13b6:	de bf       	out	0x3e, r29	; 62
    13b8:	0f be       	out	0x3f, r0	; 63
    13ba:	cd bf       	out	0x3d, r28	; 61
    13bc:	89 83       	std	Y+1, r24	; 0x01
    13be:	6a 83       	std	Y+2, r22	; 0x02
    13c0:	4b 83       	std	Y+3, r20	; 0x03

	if(Copy_u8Value == PinLow){
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	88 23       	and	r24, r24
    13c6:	09 f0       	breq	.+2      	; 0x13ca <DIO_Vid_SetPinValue+0x22>
    13c8:	74 c0       	rjmp	.+232    	; 0x14b2 <DIO_Vid_SetPinValue+0x10a>
		switch (Copy_u8Port){
    13ca:	89 81       	ldd	r24, Y+1	; 0x01
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	3f 83       	std	Y+7, r19	; 0x07
    13d2:	2e 83       	std	Y+6, r18	; 0x06
    13d4:	8e 81       	ldd	r24, Y+6	; 0x06
    13d6:	9f 81       	ldd	r25, Y+7	; 0x07
    13d8:	81 30       	cpi	r24, 0x01	; 1
    13da:	91 05       	cpc	r25, r1
    13dc:	59 f1       	breq	.+86     	; 0x1434 <DIO_Vid_SetPinValue+0x8c>
    13de:	2e 81       	ldd	r18, Y+6	; 0x06
    13e0:	3f 81       	ldd	r19, Y+7	; 0x07
    13e2:	22 30       	cpi	r18, 0x02	; 2
    13e4:	31 05       	cpc	r19, r1
    13e6:	2c f4       	brge	.+10     	; 0x13f2 <DIO_Vid_SetPinValue+0x4a>
    13e8:	8e 81       	ldd	r24, Y+6	; 0x06
    13ea:	9f 81       	ldd	r25, Y+7	; 0x07
    13ec:	00 97       	sbiw	r24, 0x00	; 0
    13ee:	69 f0       	breq	.+26     	; 0x140a <DIO_Vid_SetPinValue+0x62>
    13f0:	d2 c0       	rjmp	.+420    	; 0x1596 <DIO_Vid_SetPinValue+0x1ee>
    13f2:	2e 81       	ldd	r18, Y+6	; 0x06
    13f4:	3f 81       	ldd	r19, Y+7	; 0x07
    13f6:	22 30       	cpi	r18, 0x02	; 2
    13f8:	31 05       	cpc	r19, r1
    13fa:	89 f1       	breq	.+98     	; 0x145e <DIO_Vid_SetPinValue+0xb6>
    13fc:	8e 81       	ldd	r24, Y+6	; 0x06
    13fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1400:	83 30       	cpi	r24, 0x03	; 3
    1402:	91 05       	cpc	r25, r1
    1404:	09 f4       	brne	.+2      	; 0x1408 <DIO_Vid_SetPinValue+0x60>
    1406:	40 c0       	rjmp	.+128    	; 0x1488 <DIO_Vid_SetPinValue+0xe0>
    1408:	c6 c0       	rjmp	.+396    	; 0x1596 <DIO_Vid_SetPinValue+0x1ee>
			case Port_A : CLR_BIT(PORTA , Copy_u8Pin); break;
    140a:	ab e3       	ldi	r26, 0x3B	; 59
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	eb e3       	ldi	r30, 0x3B	; 59
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	48 2f       	mov	r20, r24
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	02 2e       	mov	r0, r18
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <DIO_Vid_SetPinValue+0x80>
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	0a 94       	dec	r0
    142a:	e2 f7       	brpl	.-8      	; 0x1424 <DIO_Vid_SetPinValue+0x7c>
    142c:	80 95       	com	r24
    142e:	84 23       	and	r24, r20
    1430:	8c 93       	st	X, r24
    1432:	b1 c0       	rjmp	.+354    	; 0x1596 <DIO_Vid_SetPinValue+0x1ee>
			case Port_B : CLR_BIT(PORTB , Copy_u8Pin); break;
    1434:	a8 e3       	ldi	r26, 0x38	; 56
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e8 e3       	ldi	r30, 0x38	; 56
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	48 2f       	mov	r20, r24
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	02 2e       	mov	r0, r18
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <DIO_Vid_SetPinValue+0xaa>
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	0a 94       	dec	r0
    1454:	e2 f7       	brpl	.-8      	; 0x144e <DIO_Vid_SetPinValue+0xa6>
    1456:	80 95       	com	r24
    1458:	84 23       	and	r24, r20
    145a:	8c 93       	st	X, r24
    145c:	9c c0       	rjmp	.+312    	; 0x1596 <DIO_Vid_SetPinValue+0x1ee>
			case Port_C : CLR_BIT(PORTC , Copy_u8Pin); break;
    145e:	a5 e3       	ldi	r26, 0x35	; 53
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e5 e3       	ldi	r30, 0x35	; 53
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	48 2f       	mov	r20, r24
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	02 2e       	mov	r0, r18
    1476:	02 c0       	rjmp	.+4      	; 0x147c <DIO_Vid_SetPinValue+0xd4>
    1478:	88 0f       	add	r24, r24
    147a:	99 1f       	adc	r25, r25
    147c:	0a 94       	dec	r0
    147e:	e2 f7       	brpl	.-8      	; 0x1478 <DIO_Vid_SetPinValue+0xd0>
    1480:	80 95       	com	r24
    1482:	84 23       	and	r24, r20
    1484:	8c 93       	st	X, r24
    1486:	87 c0       	rjmp	.+270    	; 0x1596 <DIO_Vid_SetPinValue+0x1ee>
			case Port_D : CLR_BIT(PORTD , Copy_u8Pin); break;
    1488:	a2 e3       	ldi	r26, 0x32	; 50
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	e2 e3       	ldi	r30, 0x32	; 50
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	48 2f       	mov	r20, r24
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	28 2f       	mov	r18, r24
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	02 2e       	mov	r0, r18
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <DIO_Vid_SetPinValue+0xfe>
    14a2:	88 0f       	add	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	0a 94       	dec	r0
    14a8:	e2 f7       	brpl	.-8      	; 0x14a2 <DIO_Vid_SetPinValue+0xfa>
    14aa:	80 95       	com	r24
    14ac:	84 23       	and	r24, r20
    14ae:	8c 93       	st	X, r24
    14b0:	72 c0       	rjmp	.+228    	; 0x1596 <DIO_Vid_SetPinValue+0x1ee>

		}
	}
	else if(Copy_u8Value == PinHigh){
    14b2:	8b 81       	ldd	r24, Y+3	; 0x03
    14b4:	81 30       	cpi	r24, 0x01	; 1
    14b6:	09 f0       	breq	.+2      	; 0x14ba <DIO_Vid_SetPinValue+0x112>
    14b8:	6e c0       	rjmp	.+220    	; 0x1596 <DIO_Vid_SetPinValue+0x1ee>
		switch (Copy_u8Port){
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	3d 83       	std	Y+5, r19	; 0x05
    14c2:	2c 83       	std	Y+4, r18	; 0x04
    14c4:	8c 81       	ldd	r24, Y+4	; 0x04
    14c6:	9d 81       	ldd	r25, Y+5	; 0x05
    14c8:	81 30       	cpi	r24, 0x01	; 1
    14ca:	91 05       	cpc	r25, r1
    14cc:	49 f1       	breq	.+82     	; 0x1520 <DIO_Vid_SetPinValue+0x178>
    14ce:	2c 81       	ldd	r18, Y+4	; 0x04
    14d0:	3d 81       	ldd	r19, Y+5	; 0x05
    14d2:	22 30       	cpi	r18, 0x02	; 2
    14d4:	31 05       	cpc	r19, r1
    14d6:	2c f4       	brge	.+10     	; 0x14e2 <DIO_Vid_SetPinValue+0x13a>
    14d8:	8c 81       	ldd	r24, Y+4	; 0x04
    14da:	9d 81       	ldd	r25, Y+5	; 0x05
    14dc:	00 97       	sbiw	r24, 0x00	; 0
    14de:	61 f0       	breq	.+24     	; 0x14f8 <DIO_Vid_SetPinValue+0x150>
    14e0:	5a c0       	rjmp	.+180    	; 0x1596 <DIO_Vid_SetPinValue+0x1ee>
    14e2:	2c 81       	ldd	r18, Y+4	; 0x04
    14e4:	3d 81       	ldd	r19, Y+5	; 0x05
    14e6:	22 30       	cpi	r18, 0x02	; 2
    14e8:	31 05       	cpc	r19, r1
    14ea:	71 f1       	breq	.+92     	; 0x1548 <DIO_Vid_SetPinValue+0x1a0>
    14ec:	8c 81       	ldd	r24, Y+4	; 0x04
    14ee:	9d 81       	ldd	r25, Y+5	; 0x05
    14f0:	83 30       	cpi	r24, 0x03	; 3
    14f2:	91 05       	cpc	r25, r1
    14f4:	e9 f1       	breq	.+122    	; 0x1570 <DIO_Vid_SetPinValue+0x1c8>
    14f6:	4f c0       	rjmp	.+158    	; 0x1596 <DIO_Vid_SetPinValue+0x1ee>
			case Port_A : SET_BIT(PORTA , Copy_u8Pin); break;
    14f8:	ab e3       	ldi	r26, 0x3B	; 59
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	eb e3       	ldi	r30, 0x3B	; 59
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	48 2f       	mov	r20, r24
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	02 2e       	mov	r0, r18
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <DIO_Vid_SetPinValue+0x16e>
    1512:	88 0f       	add	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	0a 94       	dec	r0
    1518:	e2 f7       	brpl	.-8      	; 0x1512 <DIO_Vid_SetPinValue+0x16a>
    151a:	84 2b       	or	r24, r20
    151c:	8c 93       	st	X, r24
    151e:	3b c0       	rjmp	.+118    	; 0x1596 <DIO_Vid_SetPinValue+0x1ee>
			case Port_B : SET_BIT(PORTB , Copy_u8Pin); break;
    1520:	a8 e3       	ldi	r26, 0x38	; 56
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e8 e3       	ldi	r30, 0x38	; 56
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	48 2f       	mov	r20, r24
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	28 2f       	mov	r18, r24
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	02 2e       	mov	r0, r18
    1538:	02 c0       	rjmp	.+4      	; 0x153e <DIO_Vid_SetPinValue+0x196>
    153a:	88 0f       	add	r24, r24
    153c:	99 1f       	adc	r25, r25
    153e:	0a 94       	dec	r0
    1540:	e2 f7       	brpl	.-8      	; 0x153a <DIO_Vid_SetPinValue+0x192>
    1542:	84 2b       	or	r24, r20
    1544:	8c 93       	st	X, r24
    1546:	27 c0       	rjmp	.+78     	; 0x1596 <DIO_Vid_SetPinValue+0x1ee>
			case Port_C : SET_BIT(PORTC , Copy_u8Pin); break;
    1548:	a5 e3       	ldi	r26, 0x35	; 53
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e5 e3       	ldi	r30, 0x35	; 53
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	48 2f       	mov	r20, r24
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	02 2e       	mov	r0, r18
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <DIO_Vid_SetPinValue+0x1be>
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	0a 94       	dec	r0
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <DIO_Vid_SetPinValue+0x1ba>
    156a:	84 2b       	or	r24, r20
    156c:	8c 93       	st	X, r24
    156e:	13 c0       	rjmp	.+38     	; 0x1596 <DIO_Vid_SetPinValue+0x1ee>
			case Port_D : SET_BIT(PORTD , Copy_u8Pin); break;
    1570:	a2 e3       	ldi	r26, 0x32	; 50
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	e2 e3       	ldi	r30, 0x32	; 50
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	48 2f       	mov	r20, r24
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	02 2e       	mov	r0, r18
    1588:	02 c0       	rjmp	.+4      	; 0x158e <DIO_Vid_SetPinValue+0x1e6>
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	0a 94       	dec	r0
    1590:	e2 f7       	brpl	.-8      	; 0x158a <DIO_Vid_SetPinValue+0x1e2>
    1592:	84 2b       	or	r24, r20
    1594:	8c 93       	st	X, r24

		}
	}
}
    1596:	27 96       	adiw	r28, 0x07	; 7
    1598:	0f b6       	in	r0, 0x3f	; 63
    159a:	f8 94       	cli
    159c:	de bf       	out	0x3e, r29	; 62
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	cd bf       	out	0x3d, r28	; 61
    15a2:	cf 91       	pop	r28
    15a4:	df 91       	pop	r29
    15a6:	08 95       	ret

000015a8 <DIO_Vid_GetPinValue>:

						/*Getting pin Value*/
/*Getting pin value, check the value of specific pin and store this value into *Data (mostly used with switches)*/
void DIO_Vid_GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *pu8Data){
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	00 d0       	rcall	.+0      	; 0x15ae <DIO_Vid_GetPinValue+0x6>
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <DIO_Vid_GetPinValue+0x8>
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <DIO_Vid_GetPinValue+0xa>
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
    15b6:	89 83       	std	Y+1, r24	; 0x01
    15b8:	6a 83       	std	Y+2, r22	; 0x02
    15ba:	5c 83       	std	Y+4, r21	; 0x04
    15bc:	4b 83       	std	Y+3, r20	; 0x03

	switch(Copy_u8Port){
    15be:	89 81       	ldd	r24, Y+1	; 0x01
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	3e 83       	std	Y+6, r19	; 0x06
    15c6:	2d 83       	std	Y+5, r18	; 0x05
    15c8:	4d 81       	ldd	r20, Y+5	; 0x05
    15ca:	5e 81       	ldd	r21, Y+6	; 0x06
    15cc:	41 30       	cpi	r20, 0x01	; 1
    15ce:	51 05       	cpc	r21, r1
    15d0:	59 f1       	breq	.+86     	; 0x1628 <DIO_Vid_GetPinValue+0x80>
    15d2:	8d 81       	ldd	r24, Y+5	; 0x05
    15d4:	9e 81       	ldd	r25, Y+6	; 0x06
    15d6:	82 30       	cpi	r24, 0x02	; 2
    15d8:	91 05       	cpc	r25, r1
    15da:	34 f4       	brge	.+12     	; 0x15e8 <DIO_Vid_GetPinValue+0x40>
    15dc:	2d 81       	ldd	r18, Y+5	; 0x05
    15de:	3e 81       	ldd	r19, Y+6	; 0x06
    15e0:	21 15       	cp	r18, r1
    15e2:	31 05       	cpc	r19, r1
    15e4:	69 f0       	breq	.+26     	; 0x1600 <DIO_Vid_GetPinValue+0x58>
    15e6:	5b c0       	rjmp	.+182    	; 0x169e <DIO_Vid_GetPinValue+0xf6>
    15e8:	4d 81       	ldd	r20, Y+5	; 0x05
    15ea:	5e 81       	ldd	r21, Y+6	; 0x06
    15ec:	42 30       	cpi	r20, 0x02	; 2
    15ee:	51 05       	cpc	r21, r1
    15f0:	79 f1       	breq	.+94     	; 0x1650 <DIO_Vid_GetPinValue+0xa8>
    15f2:	8d 81       	ldd	r24, Y+5	; 0x05
    15f4:	9e 81       	ldd	r25, Y+6	; 0x06
    15f6:	83 30       	cpi	r24, 0x03	; 3
    15f8:	91 05       	cpc	r25, r1
    15fa:	09 f4       	brne	.+2      	; 0x15fe <DIO_Vid_GetPinValue+0x56>
    15fc:	3d c0       	rjmp	.+122    	; 0x1678 <DIO_Vid_GetPinValue+0xd0>
    15fe:	4f c0       	rjmp	.+158    	; 0x169e <DIO_Vid_GetPinValue+0xf6>

		case Port_A : *pu8Data = Get_BIT(PINA , Copy_u8Pin); break;
    1600:	e9 e3       	ldi	r30, 0x39	; 57
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	88 2f       	mov	r24, r24
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	a9 01       	movw	r20, r18
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <DIO_Vid_GetPinValue+0x70>
    1614:	55 95       	asr	r21
    1616:	47 95       	ror	r20
    1618:	8a 95       	dec	r24
    161a:	e2 f7       	brpl	.-8      	; 0x1614 <DIO_Vid_GetPinValue+0x6c>
    161c:	ca 01       	movw	r24, r20
    161e:	81 70       	andi	r24, 0x01	; 1
    1620:	eb 81       	ldd	r30, Y+3	; 0x03
    1622:	fc 81       	ldd	r31, Y+4	; 0x04
    1624:	80 83       	st	Z, r24
    1626:	3b c0       	rjmp	.+118    	; 0x169e <DIO_Vid_GetPinValue+0xf6>
		case Port_B : *pu8Data = Get_BIT(PINB , Copy_u8Pin); break;
    1628:	e6 e3       	ldi	r30, 0x36	; 54
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	88 2f       	mov	r24, r24
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	a9 01       	movw	r20, r18
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <DIO_Vid_GetPinValue+0x98>
    163c:	55 95       	asr	r21
    163e:	47 95       	ror	r20
    1640:	8a 95       	dec	r24
    1642:	e2 f7       	brpl	.-8      	; 0x163c <DIO_Vid_GetPinValue+0x94>
    1644:	ca 01       	movw	r24, r20
    1646:	81 70       	andi	r24, 0x01	; 1
    1648:	eb 81       	ldd	r30, Y+3	; 0x03
    164a:	fc 81       	ldd	r31, Y+4	; 0x04
    164c:	80 83       	st	Z, r24
    164e:	27 c0       	rjmp	.+78     	; 0x169e <DIO_Vid_GetPinValue+0xf6>
		case Port_C : *pu8Data = Get_BIT(PINC , Copy_u8Pin); break;
    1650:	e3 e3       	ldi	r30, 0x33	; 51
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	28 2f       	mov	r18, r24
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	88 2f       	mov	r24, r24
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	a9 01       	movw	r20, r18
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <DIO_Vid_GetPinValue+0xc0>
    1664:	55 95       	asr	r21
    1666:	47 95       	ror	r20
    1668:	8a 95       	dec	r24
    166a:	e2 f7       	brpl	.-8      	; 0x1664 <DIO_Vid_GetPinValue+0xbc>
    166c:	ca 01       	movw	r24, r20
    166e:	81 70       	andi	r24, 0x01	; 1
    1670:	eb 81       	ldd	r30, Y+3	; 0x03
    1672:	fc 81       	ldd	r31, Y+4	; 0x04
    1674:	80 83       	st	Z, r24
    1676:	13 c0       	rjmp	.+38     	; 0x169e <DIO_Vid_GetPinValue+0xf6>
		case Port_D : *pu8Data = Get_BIT(PIND , Copy_u8Pin); break;
    1678:	e0 e3       	ldi	r30, 0x30	; 48
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	8a 81       	ldd	r24, Y+2	; 0x02
    1684:	88 2f       	mov	r24, r24
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	a9 01       	movw	r20, r18
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <DIO_Vid_GetPinValue+0xe8>
    168c:	55 95       	asr	r21
    168e:	47 95       	ror	r20
    1690:	8a 95       	dec	r24
    1692:	e2 f7       	brpl	.-8      	; 0x168c <DIO_Vid_GetPinValue+0xe4>
    1694:	ca 01       	movw	r24, r20
    1696:	81 70       	andi	r24, 0x01	; 1
    1698:	eb 81       	ldd	r30, Y+3	; 0x03
    169a:	fc 81       	ldd	r31, Y+4	; 0x04
    169c:	80 83       	st	Z, r24
	}
}
    169e:	26 96       	adiw	r28, 0x06	; 6
    16a0:	0f b6       	in	r0, 0x3f	; 63
    16a2:	f8 94       	cli
    16a4:	de bf       	out	0x3e, r29	; 62
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	cd bf       	out	0x3d, r28	; 61
    16aa:	cf 91       	pop	r28
    16ac:	df 91       	pop	r29
    16ae:	08 95       	ret

000016b0 <DIO_Vid_SetPortDirection>:



										/*Setting port Direction*/
/*Setting Port direction register, make the whole port output all bits are ones or input all bits are zeros*/
void DIO_Vid_SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction){
    16b0:	df 93       	push	r29
    16b2:	cf 93       	push	r28
    16b4:	00 d0       	rcall	.+0      	; 0x16b6 <DIO_Vid_SetPortDirection+0x6>
    16b6:	00 d0       	rcall	.+0      	; 0x16b8 <DIO_Vid_SetPortDirection+0x8>
    16b8:	00 d0       	rcall	.+0      	; 0x16ba <DIO_Vid_SetPortDirection+0xa>
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
    16be:	89 83       	std	Y+1, r24	; 0x01
    16c0:	6a 83       	std	Y+2, r22	; 0x02

	if(Copy_u8Direction == output){
    16c2:	8a 81       	ldd	r24, Y+2	; 0x02
    16c4:	81 30       	cpi	r24, 0x01	; 1
    16c6:	99 f5       	brne	.+102    	; 0x172e <DIO_Vid_SetPortDirection+0x7e>
			switch (Copy_u8Port){
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
    16ca:	28 2f       	mov	r18, r24
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	3e 83       	std	Y+6, r19	; 0x06
    16d0:	2d 83       	std	Y+5, r18	; 0x05
    16d2:	8d 81       	ldd	r24, Y+5	; 0x05
    16d4:	9e 81       	ldd	r25, Y+6	; 0x06
    16d6:	81 30       	cpi	r24, 0x01	; 1
    16d8:	91 05       	cpc	r25, r1
    16da:	d1 f0       	breq	.+52     	; 0x1710 <DIO_Vid_SetPortDirection+0x60>
    16dc:	2d 81       	ldd	r18, Y+5	; 0x05
    16de:	3e 81       	ldd	r19, Y+6	; 0x06
    16e0:	22 30       	cpi	r18, 0x02	; 2
    16e2:	31 05       	cpc	r19, r1
    16e4:	2c f4       	brge	.+10     	; 0x16f0 <DIO_Vid_SetPortDirection+0x40>
    16e6:	8d 81       	ldd	r24, Y+5	; 0x05
    16e8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ea:	00 97       	sbiw	r24, 0x00	; 0
    16ec:	61 f0       	breq	.+24     	; 0x1706 <DIO_Vid_SetPortDirection+0x56>
    16ee:	50 c0       	rjmp	.+160    	; 0x1790 <DIO_Vid_SetPortDirection+0xe0>
    16f0:	2d 81       	ldd	r18, Y+5	; 0x05
    16f2:	3e 81       	ldd	r19, Y+6	; 0x06
    16f4:	22 30       	cpi	r18, 0x02	; 2
    16f6:	31 05       	cpc	r19, r1
    16f8:	81 f0       	breq	.+32     	; 0x171a <DIO_Vid_SetPortDirection+0x6a>
    16fa:	8d 81       	ldd	r24, Y+5	; 0x05
    16fc:	9e 81       	ldd	r25, Y+6	; 0x06
    16fe:	83 30       	cpi	r24, 0x03	; 3
    1700:	91 05       	cpc	r25, r1
    1702:	81 f0       	breq	.+32     	; 0x1724 <DIO_Vid_SetPortDirection+0x74>
    1704:	45 c0       	rjmp	.+138    	; 0x1790 <DIO_Vid_SetPortDirection+0xe0>
				case Port_A : DDRA = 0b11111111; break;
    1706:	ea e3       	ldi	r30, 0x3A	; 58
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	8f ef       	ldi	r24, 0xFF	; 255
    170c:	80 83       	st	Z, r24
    170e:	40 c0       	rjmp	.+128    	; 0x1790 <DIO_Vid_SetPortDirection+0xe0>
				case Port_B : DDRB = 0b11111111; break;
    1710:	e7 e3       	ldi	r30, 0x37	; 55
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	8f ef       	ldi	r24, 0xFF	; 255
    1716:	80 83       	st	Z, r24
    1718:	3b c0       	rjmp	.+118    	; 0x1790 <DIO_Vid_SetPortDirection+0xe0>
				case Port_C : DDRC = 0b11111111; break;
    171a:	e4 e3       	ldi	r30, 0x34	; 52
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	8f ef       	ldi	r24, 0xFF	; 255
    1720:	80 83       	st	Z, r24
    1722:	36 c0       	rjmp	.+108    	; 0x1790 <DIO_Vid_SetPortDirection+0xe0>
				case Port_D : DDRD = 0b11111111; break;
    1724:	e1 e3       	ldi	r30, 0x31	; 49
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	8f ef       	ldi	r24, 0xFF	; 255
    172a:	80 83       	st	Z, r24
    172c:	31 c0       	rjmp	.+98     	; 0x1790 <DIO_Vid_SetPortDirection+0xe0>

			}
		}
		else if(Copy_u8Direction == input){
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	88 23       	and	r24, r24
    1732:	71 f5       	brne	.+92     	; 0x1790 <DIO_Vid_SetPortDirection+0xe0>
			switch (Copy_u8Port){
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	28 2f       	mov	r18, r24
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	3c 83       	std	Y+4, r19	; 0x04
    173c:	2b 83       	std	Y+3, r18	; 0x03
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	9c 81       	ldd	r25, Y+4	; 0x04
    1742:	81 30       	cpi	r24, 0x01	; 1
    1744:	91 05       	cpc	r25, r1
    1746:	c9 f0       	breq	.+50     	; 0x177a <DIO_Vid_SetPortDirection+0xca>
    1748:	2b 81       	ldd	r18, Y+3	; 0x03
    174a:	3c 81       	ldd	r19, Y+4	; 0x04
    174c:	22 30       	cpi	r18, 0x02	; 2
    174e:	31 05       	cpc	r19, r1
    1750:	2c f4       	brge	.+10     	; 0x175c <DIO_Vid_SetPortDirection+0xac>
    1752:	8b 81       	ldd	r24, Y+3	; 0x03
    1754:	9c 81       	ldd	r25, Y+4	; 0x04
    1756:	00 97       	sbiw	r24, 0x00	; 0
    1758:	61 f0       	breq	.+24     	; 0x1772 <DIO_Vid_SetPortDirection+0xc2>
    175a:	1a c0       	rjmp	.+52     	; 0x1790 <DIO_Vid_SetPortDirection+0xe0>
    175c:	2b 81       	ldd	r18, Y+3	; 0x03
    175e:	3c 81       	ldd	r19, Y+4	; 0x04
    1760:	22 30       	cpi	r18, 0x02	; 2
    1762:	31 05       	cpc	r19, r1
    1764:	71 f0       	breq	.+28     	; 0x1782 <DIO_Vid_SetPortDirection+0xd2>
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	9c 81       	ldd	r25, Y+4	; 0x04
    176a:	83 30       	cpi	r24, 0x03	; 3
    176c:	91 05       	cpc	r25, r1
    176e:	69 f0       	breq	.+26     	; 0x178a <DIO_Vid_SetPortDirection+0xda>
    1770:	0f c0       	rjmp	.+30     	; 0x1790 <DIO_Vid_SetPortDirection+0xe0>
				case Port_A : DDRA = 0b00000000; break;
    1772:	ea e3       	ldi	r30, 0x3A	; 58
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	10 82       	st	Z, r1
    1778:	0b c0       	rjmp	.+22     	; 0x1790 <DIO_Vid_SetPortDirection+0xe0>
				case Port_B : DDRB = 0b00000000; break;
    177a:	e7 e3       	ldi	r30, 0x37	; 55
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	10 82       	st	Z, r1
    1780:	07 c0       	rjmp	.+14     	; 0x1790 <DIO_Vid_SetPortDirection+0xe0>
				case Port_C : DDRC = 0b00000000; break;
    1782:	e4 e3       	ldi	r30, 0x34	; 52
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	10 82       	st	Z, r1
    1788:	03 c0       	rjmp	.+6      	; 0x1790 <DIO_Vid_SetPortDirection+0xe0>
				case Port_D : DDRD = 0b00000000; break;
    178a:	e1 e3       	ldi	r30, 0x31	; 49
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	10 82       	st	Z, r1

			}
		}
}
    1790:	26 96       	adiw	r28, 0x06	; 6
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	f8 94       	cli
    1796:	de bf       	out	0x3e, r29	; 62
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	cd bf       	out	0x3d, r28	; 61
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <DIO_Vid_SetPortValue>:


						/*Setting port(port register) value*/
void DIO_Vid_SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value){
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	00 d0       	rcall	.+0      	; 0x17a8 <DIO_Vid_SetPortValue+0x6>
    17a8:	00 d0       	rcall	.+0      	; 0x17aa <DIO_Vid_SetPortValue+0x8>
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
    17ae:	89 83       	std	Y+1, r24	; 0x01
    17b0:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	3c 83       	std	Y+4, r19	; 0x04
    17ba:	2b 83       	std	Y+3, r18	; 0x03
    17bc:	8b 81       	ldd	r24, Y+3	; 0x03
    17be:	9c 81       	ldd	r25, Y+4	; 0x04
    17c0:	81 30       	cpi	r24, 0x01	; 1
    17c2:	91 05       	cpc	r25, r1
    17c4:	d1 f0       	breq	.+52     	; 0x17fa <DIO_Vid_SetPortValue+0x58>
    17c6:	2b 81       	ldd	r18, Y+3	; 0x03
    17c8:	3c 81       	ldd	r19, Y+4	; 0x04
    17ca:	22 30       	cpi	r18, 0x02	; 2
    17cc:	31 05       	cpc	r19, r1
    17ce:	2c f4       	brge	.+10     	; 0x17da <DIO_Vid_SetPortValue+0x38>
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	9c 81       	ldd	r25, Y+4	; 0x04
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	61 f0       	breq	.+24     	; 0x17f0 <DIO_Vid_SetPortValue+0x4e>
    17d8:	1e c0       	rjmp	.+60     	; 0x1816 <DIO_Vid_SetPortValue+0x74>
    17da:	2b 81       	ldd	r18, Y+3	; 0x03
    17dc:	3c 81       	ldd	r19, Y+4	; 0x04
    17de:	22 30       	cpi	r18, 0x02	; 2
    17e0:	31 05       	cpc	r19, r1
    17e2:	81 f0       	breq	.+32     	; 0x1804 <DIO_Vid_SetPortValue+0x62>
    17e4:	8b 81       	ldd	r24, Y+3	; 0x03
    17e6:	9c 81       	ldd	r25, Y+4	; 0x04
    17e8:	83 30       	cpi	r24, 0x03	; 3
    17ea:	91 05       	cpc	r25, r1
    17ec:	81 f0       	breq	.+32     	; 0x180e <DIO_Vid_SetPortValue+0x6c>
    17ee:	13 c0       	rjmp	.+38     	; 0x1816 <DIO_Vid_SetPortValue+0x74>

			case Port_A :   PORTA = Copy_u8Value; break;
    17f0:	eb e3       	ldi	r30, 0x3B	; 59
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	80 83       	st	Z, r24
    17f8:	0e c0       	rjmp	.+28     	; 0x1816 <DIO_Vid_SetPortValue+0x74>
			case Port_B :   PORTB = Copy_u8Value; break;
    17fa:	e8 e3       	ldi	r30, 0x38	; 56
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	80 83       	st	Z, r24
    1802:	09 c0       	rjmp	.+18     	; 0x1816 <DIO_Vid_SetPortValue+0x74>
			case Port_C :   PORTC = Copy_u8Value; break;
    1804:	e5 e3       	ldi	r30, 0x35	; 53
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	80 83       	st	Z, r24
    180c:	04 c0       	rjmp	.+8      	; 0x1816 <DIO_Vid_SetPortValue+0x74>
			case Port_D :   PORTD = Copy_u8Value; break;
    180e:	e2 e3       	ldi	r30, 0x32	; 50
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	8a 81       	ldd	r24, Y+2	; 0x02
    1814:	80 83       	st	Z, r24
		}
}
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <DIO_Vid_GetPportValue>:


						/*Getting port(PIN register) value*/
/*Getting port value, check the value of specific port and store this value into *Data */
void DIO_Vid_GetPportValue(u8 Copy_u8Port, u8 *pu8Data){
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	00 d0       	rcall	.+0      	; 0x182a <DIO_Vid_GetPportValue+0x6>
    182a:	00 d0       	rcall	.+0      	; 0x182c <DIO_Vid_GetPportValue+0x8>
    182c:	0f 92       	push	r0
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	89 83       	std	Y+1, r24	; 0x01
    1834:	7b 83       	std	Y+3, r23	; 0x03
    1836:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	28 2f       	mov	r18, r24
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	3d 83       	std	Y+5, r19	; 0x05
    1840:	2c 83       	std	Y+4, r18	; 0x04
    1842:	8c 81       	ldd	r24, Y+4	; 0x04
    1844:	9d 81       	ldd	r25, Y+5	; 0x05
    1846:	81 30       	cpi	r24, 0x01	; 1
    1848:	91 05       	cpc	r25, r1
    184a:	e1 f0       	breq	.+56     	; 0x1884 <DIO_Vid_GetPportValue+0x60>
    184c:	2c 81       	ldd	r18, Y+4	; 0x04
    184e:	3d 81       	ldd	r19, Y+5	; 0x05
    1850:	22 30       	cpi	r18, 0x02	; 2
    1852:	31 05       	cpc	r19, r1
    1854:	2c f4       	brge	.+10     	; 0x1860 <DIO_Vid_GetPportValue+0x3c>
    1856:	8c 81       	ldd	r24, Y+4	; 0x04
    1858:	9d 81       	ldd	r25, Y+5	; 0x05
    185a:	00 97       	sbiw	r24, 0x00	; 0
    185c:	61 f0       	breq	.+24     	; 0x1876 <DIO_Vid_GetPportValue+0x52>
    185e:	26 c0       	rjmp	.+76     	; 0x18ac <DIO_Vid_GetPportValue+0x88>
    1860:	2c 81       	ldd	r18, Y+4	; 0x04
    1862:	3d 81       	ldd	r19, Y+5	; 0x05
    1864:	22 30       	cpi	r18, 0x02	; 2
    1866:	31 05       	cpc	r19, r1
    1868:	a1 f0       	breq	.+40     	; 0x1892 <DIO_Vid_GetPportValue+0x6e>
    186a:	8c 81       	ldd	r24, Y+4	; 0x04
    186c:	9d 81       	ldd	r25, Y+5	; 0x05
    186e:	83 30       	cpi	r24, 0x03	; 3
    1870:	91 05       	cpc	r25, r1
    1872:	b1 f0       	breq	.+44     	; 0x18a0 <DIO_Vid_GetPportValue+0x7c>
    1874:	1b c0       	rjmp	.+54     	; 0x18ac <DIO_Vid_GetPportValue+0x88>

			case Port_A : *pu8Data = PORTA; break;
    1876:	eb e3       	ldi	r30, 0x3B	; 59
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	ea 81       	ldd	r30, Y+2	; 0x02
    187e:	fb 81       	ldd	r31, Y+3	; 0x03
    1880:	80 83       	st	Z, r24
    1882:	14 c0       	rjmp	.+40     	; 0x18ac <DIO_Vid_GetPportValue+0x88>
			case Port_B : *pu8Data = PORTB; break;
    1884:	e8 e3       	ldi	r30, 0x38	; 56
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	ea 81       	ldd	r30, Y+2	; 0x02
    188c:	fb 81       	ldd	r31, Y+3	; 0x03
    188e:	80 83       	st	Z, r24
    1890:	0d c0       	rjmp	.+26     	; 0x18ac <DIO_Vid_GetPportValue+0x88>
			case Port_C : *pu8Data = PORTC; break;
    1892:	e5 e3       	ldi	r30, 0x35	; 53
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	ea 81       	ldd	r30, Y+2	; 0x02
    189a:	fb 81       	ldd	r31, Y+3	; 0x03
    189c:	80 83       	st	Z, r24
    189e:	06 c0       	rjmp	.+12     	; 0x18ac <DIO_Vid_GetPportValue+0x88>
			case Port_D : *pu8Data = PORTD; break;
    18a0:	e2 e3       	ldi	r30, 0x32	; 50
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	ea 81       	ldd	r30, Y+2	; 0x02
    18a8:	fb 81       	ldd	r31, Y+3	; 0x03
    18aa:	80 83       	st	Z, r24
		}

}
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	cf 91       	pop	r28
    18b8:	df 91       	pop	r29
    18ba:	08 95       	ret

000018bc <DIO_ConnectedPullUp>:

void DIO_ConnectedPullUp(u8 Copy_u8Port, u8 Copy_u8Pin,u8 Copy_u8ConnectedPullup){
    18bc:	df 93       	push	r29
    18be:	cf 93       	push	r28
    18c0:	00 d0       	rcall	.+0      	; 0x18c2 <DIO_ConnectedPullUp+0x6>
    18c2:	0f 92       	push	r0
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
    18c8:	89 83       	std	Y+1, r24	; 0x01
    18ca:	6a 83       	std	Y+2, r22	; 0x02
    18cc:	4b 83       	std	Y+3, r20	; 0x03

}
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	08 95       	ret

000018da <ADC_voidInit>:
#include "ADC_Private.h"


/******************FUNCTIONS DEFINITIONS*****************/
void ADC_voidInit(void)
{
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	cd b7       	in	r28, 0x3d	; 61
    18e0:	de b7       	in	r29, 0x3e	; 62
#elif ADC_REF_SELECTION == AVCC
	SET_BIT(ADMUX, REFS0);
	CLR_BIT(ADMUX, REFS1);

#elif ADC_REF_SELECTION == VOLT_2_56
	SET_BIT(ADMUX, REFS0);
    18e2:	a7 e2       	ldi	r26, 0x27	; 39
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	e7 e2       	ldi	r30, 0x27	; 39
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	80 64       	ori	r24, 0x40	; 64
    18ee:	8c 93       	st	X, r24
	SET_BIT(ADMUX, REFS1);
    18f0:	a7 e2       	ldi	r26, 0x27	; 39
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	e7 e2       	ldi	r30, 0x27	; 39
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	80 68       	ori	r24, 0x80	; 128
    18fc:	8c 93       	st	X, r24

#endif

	/***************Challenge: Make configurations***************/
	/*clear ADLAR bit, so the first 8-bits will return in ADCL, and last 2-bits in ADCH*/
	CLR_BIT(ADMUX, ADLAR);
    18fe:	a7 e2       	ldi	r26, 0x27	; 39
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	e7 e2       	ldi	r30, 0x27	; 39
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	8f 7d       	andi	r24, 0xDF	; 223
    190a:	8c 93       	st	X, r24
	/*clear AUTO trigger ADC, so the ADC conversion will start only when you call:  ADC_convert_read() */
	CLR_BIT(ADCSRA, ADATE);
    190c:	a6 e2       	ldi	r26, 0x26	; 38
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	e6 e2       	ldi	r30, 0x26	; 38
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	8f 7d       	andi	r24, 0xDF	; 223
    1918:	8c 93       	st	X, r24
	/*disable ADC interrupt: */
	CLR_BIT(ADCSRA, ADIE);
    191a:	a6 e2       	ldi	r26, 0x26	; 38
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	e6 e2       	ldi	r30, 0x26	; 38
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	87 7f       	andi	r24, 0xF7	; 247
    1926:	8c 93       	st	X, r24
	/*set pre-scaler to be: (F_CPU/64) = (8000000/64) = 125 KHz */
	CLR_BIT(ADCSRA, ADPS0);
    1928:	a6 e2       	ldi	r26, 0x26	; 38
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	e6 e2       	ldi	r30, 0x26	; 38
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	8e 7f       	andi	r24, 0xFE	; 254
    1934:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADPS1);
    1936:	a6 e2       	ldi	r26, 0x26	; 38
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	e6 e2       	ldi	r30, 0x26	; 38
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	82 60       	ori	r24, 0x02	; 2
    1942:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADPS2);
    1944:	a6 e2       	ldi	r26, 0x26	; 38
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	e6 e2       	ldi	r30, 0x26	; 38
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	84 60       	ori	r24, 0x04	; 4
    1950:	8c 93       	st	X, r24

	/*enable ADC peripheral in MCU*/
	SET_BIT(ADCSRA, ADEN);
    1952:	a6 e2       	ldi	r26, 0x26	; 38
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	e6 e2       	ldi	r30, 0x26	; 38
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	80 68       	ori	r24, 0x80	; 128
    195e:	8c 93       	st	X, r24
}
    1960:	cf 91       	pop	r28
    1962:	df 91       	pop	r29
    1964:	08 95       	ret

00001966 <ADC_u16GetConversionReading>:



u16 ADC_u16GetConversionReading(u8 copy_u8Channel)
{
    1966:	df 93       	push	r29
    1968:	cf 93       	push	r28
    196a:	00 d0       	rcall	.+0      	; 0x196c <ADC_u16GetConversionReading+0x6>
    196c:	0f 92       	push	r0
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
    1972:	8b 83       	std	Y+3, r24	; 0x03
	u16 ADC_data = 0;
    1974:	1a 82       	std	Y+2, r1	; 0x02
    1976:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8Channel == CHANNEL0)
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	81 30       	cpi	r24, 0x01	; 1
    197c:	09 f0       	breq	.+2      	; 0x1980 <ADC_u16GetConversionReading+0x1a>
    197e:	4d c0       	rjmp	.+154    	; 0x1a1a <ADC_u16GetConversionReading+0xb4>
	{
		/*select input channel to pin PA0*/
		CLR_BIT(ADMUX, MUX0);
    1980:	a7 e2       	ldi	r26, 0x27	; 39
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	e7 e2       	ldi	r30, 0x27	; 39
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	8e 7f       	andi	r24, 0xFE	; 254
    198c:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX1);
    198e:	a7 e2       	ldi	r26, 0x27	; 39
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	e7 e2       	ldi	r30, 0x27	; 39
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	8d 7f       	andi	r24, 0xFD	; 253
    199a:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX2);
    199c:	a7 e2       	ldi	r26, 0x27	; 39
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	e7 e2       	ldi	r30, 0x27	; 39
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	8b 7f       	andi	r24, 0xFB	; 251
    19a8:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX3);
    19aa:	a7 e2       	ldi	r26, 0x27	; 39
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	e7 e2       	ldi	r30, 0x27	; 39
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	87 7f       	andi	r24, 0xF7	; 247
    19b6:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX4);
    19b8:	a7 e2       	ldi	r26, 0x27	; 39
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	e7 e2       	ldi	r30, 0x27	; 39
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	8f 7e       	andi	r24, 0xEF	; 239
    19c4:	8c 93       	st	X, r24

		/*start conversion:*/
		SET_BIT(ADCSRA, ADSC);
    19c6:	a6 e2       	ldi	r26, 0x26	; 38
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e6 e2       	ldi	r30, 0x26	; 38
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	80 64       	ori	r24, 0x40	; 64
    19d2:	8c 93       	st	X, r24
		/*wait until conversion ended*/
		while(Get_BIT(ADCSRA, ADSC) == 1)
    19d4:	e6 e2       	ldi	r30, 0x26	; 38
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	82 95       	swap	r24
    19dc:	86 95       	lsr	r24
    19de:	86 95       	lsr	r24
    19e0:	83 70       	andi	r24, 0x03	; 3
    19e2:	88 2f       	mov	r24, r24
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	81 70       	andi	r24, 0x01	; 1
    19e8:	90 70       	andi	r25, 0x00	; 0
    19ea:	88 23       	and	r24, r24
    19ec:	99 f7       	brne	.-26     	; 0x19d4 <ADC_u16GetConversionReading+0x6e>
		{
			//wait until ADSC bit becomes zero
		}
		/*after conversion is finished, read data from ADCL then ADCH*/
		ADC_data = ADCL;
    19ee:	e4 e2       	ldi	r30, 0x24	; 36
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	88 2f       	mov	r24, r24
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	9a 83       	std	Y+2, r25	; 0x02
    19fa:	89 83       	std	Y+1, r24	; 0x01
		ADC_data |= (ADCH << 8);
    19fc:	e5 e2       	ldi	r30, 0x25	; 37
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	88 2f       	mov	r24, r24
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	98 2f       	mov	r25, r24
    1a08:	88 27       	eor	r24, r24
    1a0a:	9c 01       	movw	r18, r24
    1a0c:	89 81       	ldd	r24, Y+1	; 0x01
    1a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a10:	82 2b       	or	r24, r18
    1a12:	93 2b       	or	r25, r19
    1a14:	9a 83       	std	Y+2, r25	; 0x02
    1a16:	89 83       	std	Y+1, r24	; 0x01
    1a18:	36 c2       	rjmp	.+1132   	; 0x1e86 <ADC_u16GetConversionReading+0x520>
	}

	else if(copy_u8Channel == CHANNEL1)
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	82 30       	cpi	r24, 0x02	; 2
    1a1e:	09 f0       	breq	.+2      	; 0x1a22 <ADC_u16GetConversionReading+0xbc>
    1a20:	4d c0       	rjmp	.+154    	; 0x1abc <ADC_u16GetConversionReading+0x156>
	{
		/*select input channel to pin PA1*/
		SET_BIT(ADMUX, MUX0);
    1a22:	a7 e2       	ldi	r26, 0x27	; 39
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	e7 e2       	ldi	r30, 0x27	; 39
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	81 60       	ori	r24, 0x01	; 1
    1a2e:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX1);
    1a30:	a7 e2       	ldi	r26, 0x27	; 39
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	e7 e2       	ldi	r30, 0x27	; 39
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	8d 7f       	andi	r24, 0xFD	; 253
    1a3c:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX2);
    1a3e:	a7 e2       	ldi	r26, 0x27	; 39
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	e7 e2       	ldi	r30, 0x27	; 39
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	8b 7f       	andi	r24, 0xFB	; 251
    1a4a:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX3);
    1a4c:	a7 e2       	ldi	r26, 0x27	; 39
    1a4e:	b0 e0       	ldi	r27, 0x00	; 0
    1a50:	e7 e2       	ldi	r30, 0x27	; 39
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	87 7f       	andi	r24, 0xF7	; 247
    1a58:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX4);
    1a5a:	a7 e2       	ldi	r26, 0x27	; 39
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	e7 e2       	ldi	r30, 0x27	; 39
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	8f 7e       	andi	r24, 0xEF	; 239
    1a66:	8c 93       	st	X, r24

		/*start conversion:*/
		SET_BIT(ADCSRA, ADSC);
    1a68:	a6 e2       	ldi	r26, 0x26	; 38
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e6 e2       	ldi	r30, 0x26	; 38
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	80 64       	ori	r24, 0x40	; 64
    1a74:	8c 93       	st	X, r24
		/*wait until conversion ended*/
		while(Get_BIT(ADCSRA, ADSC) == 1)
    1a76:	e6 e2       	ldi	r30, 0x26	; 38
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	82 95       	swap	r24
    1a7e:	86 95       	lsr	r24
    1a80:	86 95       	lsr	r24
    1a82:	83 70       	andi	r24, 0x03	; 3
    1a84:	88 2f       	mov	r24, r24
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	81 70       	andi	r24, 0x01	; 1
    1a8a:	90 70       	andi	r25, 0x00	; 0
    1a8c:	88 23       	and	r24, r24
    1a8e:	99 f7       	brne	.-26     	; 0x1a76 <ADC_u16GetConversionReading+0x110>
		{
			//wait until ADSC bit becomes zero
		}
		/*after conversion is finished, read data from ADCL then ADCH*/
		ADC_data = ADCL;
    1a90:	e4 e2       	ldi	r30, 0x24	; 36
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	88 2f       	mov	r24, r24
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	9a 83       	std	Y+2, r25	; 0x02
    1a9c:	89 83       	std	Y+1, r24	; 0x01
		ADC_data |= (ADCH << 8);
    1a9e:	e5 e2       	ldi	r30, 0x25	; 37
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	88 2f       	mov	r24, r24
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	98 2f       	mov	r25, r24
    1aaa:	88 27       	eor	r24, r24
    1aac:	9c 01       	movw	r18, r24
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
    1ab0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab2:	82 2b       	or	r24, r18
    1ab4:	93 2b       	or	r25, r19
    1ab6:	9a 83       	std	Y+2, r25	; 0x02
    1ab8:	89 83       	std	Y+1, r24	; 0x01
    1aba:	e5 c1       	rjmp	.+970    	; 0x1e86 <ADC_u16GetConversionReading+0x520>
	}

	else if(copy_u8Channel == CHANNEL2)
    1abc:	8b 81       	ldd	r24, Y+3	; 0x03
    1abe:	83 30       	cpi	r24, 0x03	; 3
    1ac0:	09 f0       	breq	.+2      	; 0x1ac4 <ADC_u16GetConversionReading+0x15e>
    1ac2:	4d c0       	rjmp	.+154    	; 0x1b5e <ADC_u16GetConversionReading+0x1f8>
	{
		/*select input channel to pin PA2*/
		CLR_BIT(ADMUX, MUX0);
    1ac4:	a7 e2       	ldi	r26, 0x27	; 39
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	e7 e2       	ldi	r30, 0x27	; 39
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	8e 7f       	andi	r24, 0xFE	; 254
    1ad0:	8c 93       	st	X, r24
		SET_BIT(ADMUX, MUX1);
    1ad2:	a7 e2       	ldi	r26, 0x27	; 39
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	e7 e2       	ldi	r30, 0x27	; 39
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	82 60       	ori	r24, 0x02	; 2
    1ade:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX2);
    1ae0:	a7 e2       	ldi	r26, 0x27	; 39
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	e7 e2       	ldi	r30, 0x27	; 39
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	8b 7f       	andi	r24, 0xFB	; 251
    1aec:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX3);
    1aee:	a7 e2       	ldi	r26, 0x27	; 39
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	e7 e2       	ldi	r30, 0x27	; 39
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	87 7f       	andi	r24, 0xF7	; 247
    1afa:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX4);
    1afc:	a7 e2       	ldi	r26, 0x27	; 39
    1afe:	b0 e0       	ldi	r27, 0x00	; 0
    1b00:	e7 e2       	ldi	r30, 0x27	; 39
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	80 81       	ld	r24, Z
    1b06:	8f 7e       	andi	r24, 0xEF	; 239
    1b08:	8c 93       	st	X, r24

		/*start conversion:*/
		SET_BIT(ADCSRA, ADSC);
    1b0a:	a6 e2       	ldi	r26, 0x26	; 38
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	e6 e2       	ldi	r30, 0x26	; 38
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	80 64       	ori	r24, 0x40	; 64
    1b16:	8c 93       	st	X, r24
		/*wait until conversion ended*/
		while(Get_BIT(ADCSRA, ADSC) == 1)
    1b18:	e6 e2       	ldi	r30, 0x26	; 38
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	82 95       	swap	r24
    1b20:	86 95       	lsr	r24
    1b22:	86 95       	lsr	r24
    1b24:	83 70       	andi	r24, 0x03	; 3
    1b26:	88 2f       	mov	r24, r24
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	81 70       	andi	r24, 0x01	; 1
    1b2c:	90 70       	andi	r25, 0x00	; 0
    1b2e:	88 23       	and	r24, r24
    1b30:	99 f7       	brne	.-26     	; 0x1b18 <ADC_u16GetConversionReading+0x1b2>
		{
			//wait until ADSC bit becomes zero
		}
		/*after conversion is finished, read data from ADCL then ADCH*/
		ADC_data = ADCL;
    1b32:	e4 e2       	ldi	r30, 0x24	; 36
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	88 2f       	mov	r24, r24
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	9a 83       	std	Y+2, r25	; 0x02
    1b3e:	89 83       	std	Y+1, r24	; 0x01
		ADC_data |= (ADCH << 8);
    1b40:	e5 e2       	ldi	r30, 0x25	; 37
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	88 2f       	mov	r24, r24
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	98 2f       	mov	r25, r24
    1b4c:	88 27       	eor	r24, r24
    1b4e:	9c 01       	movw	r18, r24
    1b50:	89 81       	ldd	r24, Y+1	; 0x01
    1b52:	9a 81       	ldd	r25, Y+2	; 0x02
    1b54:	82 2b       	or	r24, r18
    1b56:	93 2b       	or	r25, r19
    1b58:	9a 83       	std	Y+2, r25	; 0x02
    1b5a:	89 83       	std	Y+1, r24	; 0x01
    1b5c:	94 c1       	rjmp	.+808    	; 0x1e86 <ADC_u16GetConversionReading+0x520>
	}

	else if(copy_u8Channel == CHANNEL3)
    1b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b60:	84 30       	cpi	r24, 0x04	; 4
    1b62:	09 f0       	breq	.+2      	; 0x1b66 <ADC_u16GetConversionReading+0x200>
    1b64:	4d c0       	rjmp	.+154    	; 0x1c00 <ADC_u16GetConversionReading+0x29a>
	{

		/*select input channel to pin PA3*/
		SET_BIT(ADMUX, MUX0);
    1b66:	a7 e2       	ldi	r26, 0x27	; 39
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	e7 e2       	ldi	r30, 0x27	; 39
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	81 60       	ori	r24, 0x01	; 1
    1b72:	8c 93       	st	X, r24
		SET_BIT(ADMUX, MUX1);
    1b74:	a7 e2       	ldi	r26, 0x27	; 39
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	e7 e2       	ldi	r30, 0x27	; 39
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	82 60       	ori	r24, 0x02	; 2
    1b80:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX2);
    1b82:	a7 e2       	ldi	r26, 0x27	; 39
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	e7 e2       	ldi	r30, 0x27	; 39
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	80 81       	ld	r24, Z
    1b8c:	8b 7f       	andi	r24, 0xFB	; 251
    1b8e:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX3);
    1b90:	a7 e2       	ldi	r26, 0x27	; 39
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	e7 e2       	ldi	r30, 0x27	; 39
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	87 7f       	andi	r24, 0xF7	; 247
    1b9c:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX4);
    1b9e:	a7 e2       	ldi	r26, 0x27	; 39
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	e7 e2       	ldi	r30, 0x27	; 39
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	8f 7e       	andi	r24, 0xEF	; 239
    1baa:	8c 93       	st	X, r24

		/*start conversion:*/
		SET_BIT(ADCSRA, ADSC);
    1bac:	a6 e2       	ldi	r26, 0x26	; 38
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	e6 e2       	ldi	r30, 0x26	; 38
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	80 64       	ori	r24, 0x40	; 64
    1bb8:	8c 93       	st	X, r24
		/*wait until conversion ended*/
		while(Get_BIT(ADCSRA, ADSC) == 1)
    1bba:	e6 e2       	ldi	r30, 0x26	; 38
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	82 95       	swap	r24
    1bc2:	86 95       	lsr	r24
    1bc4:	86 95       	lsr	r24
    1bc6:	83 70       	andi	r24, 0x03	; 3
    1bc8:	88 2f       	mov	r24, r24
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	81 70       	andi	r24, 0x01	; 1
    1bce:	90 70       	andi	r25, 0x00	; 0
    1bd0:	88 23       	and	r24, r24
    1bd2:	99 f7       	brne	.-26     	; 0x1bba <ADC_u16GetConversionReading+0x254>
		{
			//wait until ADSC bit becomes zero
		}
		/*after conversion is finished, read data from ADCL then ADCH*/
		ADC_data = ADCL;
    1bd4:	e4 e2       	ldi	r30, 0x24	; 36
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	80 81       	ld	r24, Z
    1bda:	88 2f       	mov	r24, r24
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	9a 83       	std	Y+2, r25	; 0x02
    1be0:	89 83       	std	Y+1, r24	; 0x01
		ADC_data |= (ADCH << 8);
    1be2:	e5 e2       	ldi	r30, 0x25	; 37
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	88 2f       	mov	r24, r24
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	98 2f       	mov	r25, r24
    1bee:	88 27       	eor	r24, r24
    1bf0:	9c 01       	movw	r18, r24
    1bf2:	89 81       	ldd	r24, Y+1	; 0x01
    1bf4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf6:	82 2b       	or	r24, r18
    1bf8:	93 2b       	or	r25, r19
    1bfa:	9a 83       	std	Y+2, r25	; 0x02
    1bfc:	89 83       	std	Y+1, r24	; 0x01
    1bfe:	43 c1       	rjmp	.+646    	; 0x1e86 <ADC_u16GetConversionReading+0x520>

	}

	else if(copy_u8Channel == CHANNEL4)
    1c00:	8b 81       	ldd	r24, Y+3	; 0x03
    1c02:	85 30       	cpi	r24, 0x05	; 5
    1c04:	09 f0       	breq	.+2      	; 0x1c08 <ADC_u16GetConversionReading+0x2a2>
    1c06:	4d c0       	rjmp	.+154    	; 0x1ca2 <ADC_u16GetConversionReading+0x33c>
	{
		/*select input channel to pin PA4*/
		CLR_BIT(ADMUX, MUX0);
    1c08:	a7 e2       	ldi	r26, 0x27	; 39
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e7 e2       	ldi	r30, 0x27	; 39
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	8e 7f       	andi	r24, 0xFE	; 254
    1c14:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX1);
    1c16:	a7 e2       	ldi	r26, 0x27	; 39
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	e7 e2       	ldi	r30, 0x27	; 39
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	8d 7f       	andi	r24, 0xFD	; 253
    1c22:	8c 93       	st	X, r24
		SET_BIT(ADMUX, MUX2);
    1c24:	a7 e2       	ldi	r26, 0x27	; 39
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e7 e2       	ldi	r30, 0x27	; 39
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	84 60       	ori	r24, 0x04	; 4
    1c30:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX3);
    1c32:	a7 e2       	ldi	r26, 0x27	; 39
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	e7 e2       	ldi	r30, 0x27	; 39
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	87 7f       	andi	r24, 0xF7	; 247
    1c3e:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX4);
    1c40:	a7 e2       	ldi	r26, 0x27	; 39
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	e7 e2       	ldi	r30, 0x27	; 39
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	8f 7e       	andi	r24, 0xEF	; 239
    1c4c:	8c 93       	st	X, r24

		/*start conversion:*/
		SET_BIT(ADCSRA, ADSC);
    1c4e:	a6 e2       	ldi	r26, 0x26	; 38
    1c50:	b0 e0       	ldi	r27, 0x00	; 0
    1c52:	e6 e2       	ldi	r30, 0x26	; 38
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
    1c58:	80 64       	ori	r24, 0x40	; 64
    1c5a:	8c 93       	st	X, r24
		/*wait until conversion ended*/
		while(Get_BIT(ADCSRA, ADSC) == 1)
    1c5c:	e6 e2       	ldi	r30, 0x26	; 38
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	82 95       	swap	r24
    1c64:	86 95       	lsr	r24
    1c66:	86 95       	lsr	r24
    1c68:	83 70       	andi	r24, 0x03	; 3
    1c6a:	88 2f       	mov	r24, r24
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	81 70       	andi	r24, 0x01	; 1
    1c70:	90 70       	andi	r25, 0x00	; 0
    1c72:	88 23       	and	r24, r24
    1c74:	99 f7       	brne	.-26     	; 0x1c5c <ADC_u16GetConversionReading+0x2f6>
		{
			//wait until ADSC bit becomes zero
		}
		/*after conversion is finished, read data from ADCL then ADCH*/
		ADC_data = ADCL;
    1c76:	e4 e2       	ldi	r30, 0x24	; 36
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	88 2f       	mov	r24, r24
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	9a 83       	std	Y+2, r25	; 0x02
    1c82:	89 83       	std	Y+1, r24	; 0x01
		ADC_data |= (ADCH << 8);
    1c84:	e5 e2       	ldi	r30, 0x25	; 37
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	88 2f       	mov	r24, r24
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	98 2f       	mov	r25, r24
    1c90:	88 27       	eor	r24, r24
    1c92:	9c 01       	movw	r18, r24
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
    1c96:	9a 81       	ldd	r25, Y+2	; 0x02
    1c98:	82 2b       	or	r24, r18
    1c9a:	93 2b       	or	r25, r19
    1c9c:	9a 83       	std	Y+2, r25	; 0x02
    1c9e:	89 83       	std	Y+1, r24	; 0x01
    1ca0:	f2 c0       	rjmp	.+484    	; 0x1e86 <ADC_u16GetConversionReading+0x520>
	}

	else if(copy_u8Channel == CHANNEL5)
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	86 30       	cpi	r24, 0x06	; 6
    1ca6:	09 f0       	breq	.+2      	; 0x1caa <ADC_u16GetConversionReading+0x344>
    1ca8:	4d c0       	rjmp	.+154    	; 0x1d44 <ADC_u16GetConversionReading+0x3de>
	{

		/*select input channel to pin PA5*/
		SET_BIT(ADMUX, MUX0);
    1caa:	a7 e2       	ldi	r26, 0x27	; 39
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	e7 e2       	ldi	r30, 0x27	; 39
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	81 60       	ori	r24, 0x01	; 1
    1cb6:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX1);
    1cb8:	a7 e2       	ldi	r26, 0x27	; 39
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	e7 e2       	ldi	r30, 0x27	; 39
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	8d 7f       	andi	r24, 0xFD	; 253
    1cc4:	8c 93       	st	X, r24
		SET_BIT(ADMUX, MUX2);
    1cc6:	a7 e2       	ldi	r26, 0x27	; 39
    1cc8:	b0 e0       	ldi	r27, 0x00	; 0
    1cca:	e7 e2       	ldi	r30, 0x27	; 39
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	84 60       	ori	r24, 0x04	; 4
    1cd2:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX3);
    1cd4:	a7 e2       	ldi	r26, 0x27	; 39
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	e7 e2       	ldi	r30, 0x27	; 39
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	87 7f       	andi	r24, 0xF7	; 247
    1ce0:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX4);
    1ce2:	a7 e2       	ldi	r26, 0x27	; 39
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	e7 e2       	ldi	r30, 0x27	; 39
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	8f 7e       	andi	r24, 0xEF	; 239
    1cee:	8c 93       	st	X, r24

		/*start conversion:*/
		SET_BIT(ADCSRA, ADSC);
    1cf0:	a6 e2       	ldi	r26, 0x26	; 38
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	e6 e2       	ldi	r30, 0x26	; 38
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	80 64       	ori	r24, 0x40	; 64
    1cfc:	8c 93       	st	X, r24
		/*wait until conversion ended*/
		while(Get_BIT(ADCSRA, ADSC) == 1)
    1cfe:	e6 e2       	ldi	r30, 0x26	; 38
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	80 81       	ld	r24, Z
    1d04:	82 95       	swap	r24
    1d06:	86 95       	lsr	r24
    1d08:	86 95       	lsr	r24
    1d0a:	83 70       	andi	r24, 0x03	; 3
    1d0c:	88 2f       	mov	r24, r24
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	81 70       	andi	r24, 0x01	; 1
    1d12:	90 70       	andi	r25, 0x00	; 0
    1d14:	88 23       	and	r24, r24
    1d16:	99 f7       	brne	.-26     	; 0x1cfe <ADC_u16GetConversionReading+0x398>
		{
			//wait until ADSC bit becomes zero
		}
		/*after conversion is finished, read data from ADCL then ADCH*/
		ADC_data = ADCL;
    1d18:	e4 e2       	ldi	r30, 0x24	; 36
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	88 2f       	mov	r24, r24
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	9a 83       	std	Y+2, r25	; 0x02
    1d24:	89 83       	std	Y+1, r24	; 0x01
		ADC_data |= (ADCH << 8);
    1d26:	e5 e2       	ldi	r30, 0x25	; 37
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	88 2f       	mov	r24, r24
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	98 2f       	mov	r25, r24
    1d32:	88 27       	eor	r24, r24
    1d34:	9c 01       	movw	r18, r24
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3a:	82 2b       	or	r24, r18
    1d3c:	93 2b       	or	r25, r19
    1d3e:	9a 83       	std	Y+2, r25	; 0x02
    1d40:	89 83       	std	Y+1, r24	; 0x01
    1d42:	a1 c0       	rjmp	.+322    	; 0x1e86 <ADC_u16GetConversionReading+0x520>
	}

	else if(copy_u8Channel == CHANNEL6)
    1d44:	8b 81       	ldd	r24, Y+3	; 0x03
    1d46:	87 30       	cpi	r24, 0x07	; 7
    1d48:	09 f0       	breq	.+2      	; 0x1d4c <ADC_u16GetConversionReading+0x3e6>
    1d4a:	4d c0       	rjmp	.+154    	; 0x1de6 <ADC_u16GetConversionReading+0x480>
	{

		/*select input channel to pin PA6*/
		CLR_BIT(ADMUX, MUX0);
    1d4c:	a7 e2       	ldi	r26, 0x27	; 39
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	e7 e2       	ldi	r30, 0x27	; 39
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	80 81       	ld	r24, Z
    1d56:	8e 7f       	andi	r24, 0xFE	; 254
    1d58:	8c 93       	st	X, r24
		SET_BIT(ADMUX, MUX1);
    1d5a:	a7 e2       	ldi	r26, 0x27	; 39
    1d5c:	b0 e0       	ldi	r27, 0x00	; 0
    1d5e:	e7 e2       	ldi	r30, 0x27	; 39
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	82 60       	ori	r24, 0x02	; 2
    1d66:	8c 93       	st	X, r24
		SET_BIT(ADMUX, MUX2);
    1d68:	a7 e2       	ldi	r26, 0x27	; 39
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	e7 e2       	ldi	r30, 0x27	; 39
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	84 60       	ori	r24, 0x04	; 4
    1d74:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX3);
    1d76:	a7 e2       	ldi	r26, 0x27	; 39
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	e7 e2       	ldi	r30, 0x27	; 39
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	87 7f       	andi	r24, 0xF7	; 247
    1d82:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX4);
    1d84:	a7 e2       	ldi	r26, 0x27	; 39
    1d86:	b0 e0       	ldi	r27, 0x00	; 0
    1d88:	e7 e2       	ldi	r30, 0x27	; 39
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	8f 7e       	andi	r24, 0xEF	; 239
    1d90:	8c 93       	st	X, r24

		/*start conversion:*/
		SET_BIT(ADCSRA, ADSC);
    1d92:	a6 e2       	ldi	r26, 0x26	; 38
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	e6 e2       	ldi	r30, 0x26	; 38
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	80 64       	ori	r24, 0x40	; 64
    1d9e:	8c 93       	st	X, r24
		/*wait until conversion ended*/
		while(Get_BIT(ADCSRA, ADSC) == 1)
    1da0:	e6 e2       	ldi	r30, 0x26	; 38
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	82 95       	swap	r24
    1da8:	86 95       	lsr	r24
    1daa:	86 95       	lsr	r24
    1dac:	83 70       	andi	r24, 0x03	; 3
    1dae:	88 2f       	mov	r24, r24
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	81 70       	andi	r24, 0x01	; 1
    1db4:	90 70       	andi	r25, 0x00	; 0
    1db6:	88 23       	and	r24, r24
    1db8:	99 f7       	brne	.-26     	; 0x1da0 <ADC_u16GetConversionReading+0x43a>
		{
			//wait until ADSC bit becomes zero
		}
		/*after conversion is finished, read data from ADCL then ADCH*/
		ADC_data = ADCL;
    1dba:	e4 e2       	ldi	r30, 0x24	; 36
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	88 2f       	mov	r24, r24
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	9a 83       	std	Y+2, r25	; 0x02
    1dc6:	89 83       	std	Y+1, r24	; 0x01
		ADC_data |= (ADCH << 8);
    1dc8:	e5 e2       	ldi	r30, 0x25	; 37
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	88 2f       	mov	r24, r24
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	98 2f       	mov	r25, r24
    1dd4:	88 27       	eor	r24, r24
    1dd6:	9c 01       	movw	r18, r24
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	9a 81       	ldd	r25, Y+2	; 0x02
    1ddc:	82 2b       	or	r24, r18
    1dde:	93 2b       	or	r25, r19
    1de0:	9a 83       	std	Y+2, r25	; 0x02
    1de2:	89 83       	std	Y+1, r24	; 0x01
    1de4:	50 c0       	rjmp	.+160    	; 0x1e86 <ADC_u16GetConversionReading+0x520>

	}
	else if(copy_u8Channel == CHANNEL7)
    1de6:	8b 81       	ldd	r24, Y+3	; 0x03
    1de8:	88 30       	cpi	r24, 0x08	; 8
    1dea:	09 f0       	breq	.+2      	; 0x1dee <ADC_u16GetConversionReading+0x488>
    1dec:	4c c0       	rjmp	.+152    	; 0x1e86 <ADC_u16GetConversionReading+0x520>
	{

		/*select input channel to pin PA7*/
		SET_BIT(ADMUX, MUX0);
    1dee:	a7 e2       	ldi	r26, 0x27	; 39
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e7 e2       	ldi	r30, 0x27	; 39
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	81 60       	ori	r24, 0x01	; 1
    1dfa:	8c 93       	st	X, r24
		SET_BIT(ADMUX, MUX1);
    1dfc:	a7 e2       	ldi	r26, 0x27	; 39
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	e7 e2       	ldi	r30, 0x27	; 39
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	82 60       	ori	r24, 0x02	; 2
    1e08:	8c 93       	st	X, r24
		SET_BIT(ADMUX, MUX2);
    1e0a:	a7 e2       	ldi	r26, 0x27	; 39
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	e7 e2       	ldi	r30, 0x27	; 39
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	84 60       	ori	r24, 0x04	; 4
    1e16:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX3);
    1e18:	a7 e2       	ldi	r26, 0x27	; 39
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	e7 e2       	ldi	r30, 0x27	; 39
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	87 7f       	andi	r24, 0xF7	; 247
    1e24:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, MUX4);
    1e26:	a7 e2       	ldi	r26, 0x27	; 39
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	e7 e2       	ldi	r30, 0x27	; 39
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	8f 7e       	andi	r24, 0xEF	; 239
    1e32:	8c 93       	st	X, r24

		/*start conversion:*/
		SET_BIT(ADCSRA, ADSC);
    1e34:	a6 e2       	ldi	r26, 0x26	; 38
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	e6 e2       	ldi	r30, 0x26	; 38
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	80 64       	ori	r24, 0x40	; 64
    1e40:	8c 93       	st	X, r24
		/*wait until conversion ended*/
		while(Get_BIT(ADCSRA, ADSC) == 1)
    1e42:	e6 e2       	ldi	r30, 0x26	; 38
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	82 95       	swap	r24
    1e4a:	86 95       	lsr	r24
    1e4c:	86 95       	lsr	r24
    1e4e:	83 70       	andi	r24, 0x03	; 3
    1e50:	88 2f       	mov	r24, r24
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	81 70       	andi	r24, 0x01	; 1
    1e56:	90 70       	andi	r25, 0x00	; 0
    1e58:	88 23       	and	r24, r24
    1e5a:	99 f7       	brne	.-26     	; 0x1e42 <ADC_u16GetConversionReading+0x4dc>
		{
			//wait until ADSC bit becomes zero
		}
		/*after conversion is finished, read data from ADCL then ADCH*/
		ADC_data = ADCL;
    1e5c:	e4 e2       	ldi	r30, 0x24	; 36
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	88 2f       	mov	r24, r24
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	9a 83       	std	Y+2, r25	; 0x02
    1e68:	89 83       	std	Y+1, r24	; 0x01
		ADC_data |= (ADCH << 8);
    1e6a:	e5 e2       	ldi	r30, 0x25	; 37
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	80 81       	ld	r24, Z
    1e70:	88 2f       	mov	r24, r24
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	98 2f       	mov	r25, r24
    1e76:	88 27       	eor	r24, r24
    1e78:	9c 01       	movw	r18, r24
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7e:	82 2b       	or	r24, r18
    1e80:	93 2b       	or	r25, r19
    1e82:	9a 83       	std	Y+2, r25	; 0x02
    1e84:	89 83       	std	Y+1, r24	; 0x01
	}
	/*return ADC data*/
	return ADC_data;
    1e86:	89 81       	ldd	r24, Y+1	; 0x01
    1e88:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1e8a:	0f 90       	pop	r0
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	cf 91       	pop	r28
    1e92:	df 91       	pop	r29
    1e94:	08 95       	ret

00001e96 <LM35_voidInit>:


/***********FUNCTIONS DEFINITIONS*********/

void LM35_voidInit(void)
{
    1e96:	df 93       	push	r29
    1e98:	cf 93       	push	r28
    1e9a:	cd b7       	in	r28, 0x3d	; 61
    1e9c:	de b7       	in	r29, 0x3e	; 62
	ADC_voidInit();
    1e9e:	0e 94 6d 0c 	call	0x18da	; 0x18da <ADC_voidInit>
}
    1ea2:	cf 91       	pop	r28
    1ea4:	df 91       	pop	r29
    1ea6:	08 95       	ret

00001ea8 <LM35_u16GetTempReading>:


u16 LM35_u16GetTempReading(u8 u8_LMChannel)
{
    1ea8:	df 93       	push	r29
    1eaa:	cf 93       	push	r28
    1eac:	00 d0       	rcall	.+0      	; 0x1eae <LM35_u16GetTempReading+0x6>
    1eae:	00 d0       	rcall	.+0      	; 0x1eb0 <LM35_u16GetTempReading+0x8>
    1eb0:	0f 92       	push	r0
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
    1eb6:	8d 83       	std	Y+5, r24	; 0x05
	u16 Local_u16TempValueDigital = 0;
    1eb8:	1c 82       	std	Y+4, r1	; 0x04
    1eba:	1b 82       	std	Y+3, r1	; 0x03
	u16 Local_u16TempValueAnalog = 0;
    1ebc:	1a 82       	std	Y+2, r1	; 0x02
    1ebe:	19 82       	std	Y+1, r1	; 0x01

	/*ADC conversion*/
	Local_u16TempValueDigital = ADC_u16GetConversionReading(u8_LMChannel);
    1ec0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec2:	0e 94 b3 0c 	call	0x1966	; 0x1966 <ADC_u16GetConversionReading>
    1ec6:	9c 83       	std	Y+4, r25	; 0x04
    1ec8:	8b 83       	std	Y+3, r24	; 0x03
#if ADC_REF_SEL == AVCC
	Local_u16TempValueAnalog = (Local_u16TempValueDigital*0.48828125);


#elif ADC_REF_SEL == VOLT_2_56
	Local_u16TempValueAnalog = (Local_u16TempValueDigital*0.25);
    1eca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ecc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ece:	cc 01       	movw	r24, r24
    1ed0:	a0 e0       	ldi	r26, 0x00	; 0
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	bc 01       	movw	r22, r24
    1ed6:	cd 01       	movw	r24, r26
    1ed8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	bc 01       	movw	r22, r24
    1ee2:	cd 01       	movw	r24, r26
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	40 e8       	ldi	r20, 0x80	; 128
    1eea:	5e e3       	ldi	r21, 0x3E	; 62
    1eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	bc 01       	movw	r22, r24
    1ef6:	cd 01       	movw	r24, r26
    1ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efc:	dc 01       	movw	r26, r24
    1efe:	cb 01       	movw	r24, r22
    1f00:	9a 83       	std	Y+2, r25	; 0x02
    1f02:	89 83       	std	Y+1, r24	; 0x01
#error "ADC_REF_SEL error configuration parameter!"

#endif


	return Local_u16TempValueAnalog;
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	0f 90       	pop	r0
    1f0e:	0f 90       	pop	r0
    1f10:	0f 90       	pop	r0
    1f12:	cf 91       	pop	r28
    1f14:	df 91       	pop	r29
    1f16:	08 95       	ret

00001f18 <LCD_vid_SendData>:
#include "LCD_Interface.h"
#include "LCD_Private.h"



void LCD_vid_SendData(u8 Copy_u8Data){
    1f18:	df 93       	push	r29
    1f1a:	cf 93       	push	r28
    1f1c:	cd b7       	in	r28, 0x3d	; 61
    1f1e:	de b7       	in	r29, 0x3e	; 62
    1f20:	2f 97       	sbiw	r28, 0x0f	; 15
    1f22:	0f b6       	in	r0, 0x3f	; 63
    1f24:	f8 94       	cli
    1f26:	de bf       	out	0x3e, r29	; 62
    1f28:	0f be       	out	0x3f, r0	; 63
    1f2a:	cd bf       	out	0x3d, r28	; 61
    1f2c:	8f 87       	std	Y+15, r24	; 0x0f

	DIO_Vid_SetPinValue(CONTROL_PORT, RS_PIN,PinHigh);    //RS=1        DATA SHEAT
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	65 e0       	ldi	r22, 0x05	; 5
    1f32:	41 e0       	ldi	r20, 0x01	; 1
    1f34:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_Vid_SetPinValue>
	DIO_Vid_SetPinValue(CONTROL_PORT, RW_PIN,PinLow);     //RW=0
    1f38:	80 e0       	ldi	r24, 0x00	; 0
    1f3a:	66 e0       	ldi	r22, 0x06	; 6
    1f3c:	40 e0       	ldi	r20, 0x00	; 0
    1f3e:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_Vid_SetPinValue>
	DIO_Vid_SetPortValue(DATA_PORT, Copy_u8Data);
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f46:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <DIO_Vid_SetPortValue>
	DIO_Vid_SetPinValue(CONTROL_PORT, E_PIN,PinHigh);     //E=1&0
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	67 e0       	ldi	r22, 0x07	; 7
    1f4e:	41 e0       	ldi	r20, 0x01	; 1
    1f50:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_Vid_SetPinValue>
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	a0 e4       	ldi	r26, 0x40	; 64
    1f5a:	b0 e4       	ldi	r27, 0x40	; 64
    1f5c:	8b 87       	std	Y+11, r24	; 0x0b
    1f5e:	9c 87       	std	Y+12, r25	; 0x0c
    1f60:	ad 87       	std	Y+13, r26	; 0x0d
    1f62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f64:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f66:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f68:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	4a ef       	ldi	r20, 0xFA	; 250
    1f72:	54 e4       	ldi	r21, 0x44	; 68
    1f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	8f 83       	std	Y+7, r24	; 0x07
    1f7e:	98 87       	std	Y+8, r25	; 0x08
    1f80:	a9 87       	std	Y+9, r26	; 0x09
    1f82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f84:	6f 81       	ldd	r22, Y+7	; 0x07
    1f86:	78 85       	ldd	r23, Y+8	; 0x08
    1f88:	89 85       	ldd	r24, Y+9	; 0x09
    1f8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	40 e8       	ldi	r20, 0x80	; 128
    1f92:	5f e3       	ldi	r21, 0x3F	; 63
    1f94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f98:	88 23       	and	r24, r24
    1f9a:	2c f4       	brge	.+10     	; 0x1fa6 <LCD_vid_SendData+0x8e>
		__ticks = 1;
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	9e 83       	std	Y+6, r25	; 0x06
    1fa2:	8d 83       	std	Y+5, r24	; 0x05
    1fa4:	3f c0       	rjmp	.+126    	; 0x2024 <LCD_vid_SendData+0x10c>
	else if (__tmp > 65535)
    1fa6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa8:	78 85       	ldd	r23, Y+8	; 0x08
    1faa:	89 85       	ldd	r24, Y+9	; 0x09
    1fac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	3f ef       	ldi	r19, 0xFF	; 255
    1fb2:	4f e7       	ldi	r20, 0x7F	; 127
    1fb4:	57 e4       	ldi	r21, 0x47	; 71
    1fb6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fba:	18 16       	cp	r1, r24
    1fbc:	4c f5       	brge	.+82     	; 0x2010 <LCD_vid_SendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	40 e2       	ldi	r20, 0x20	; 32
    1fcc:	51 e4       	ldi	r21, 0x41	; 65
    1fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	bc 01       	movw	r22, r24
    1fd8:	cd 01       	movw	r24, r26
    1fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	9e 83       	std	Y+6, r25	; 0x06
    1fe4:	8d 83       	std	Y+5, r24	; 0x05
    1fe6:	0f c0       	rjmp	.+30     	; 0x2006 <LCD_vid_SendData+0xee>
    1fe8:	88 ec       	ldi	r24, 0xC8	; 200
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	9c 83       	std	Y+4, r25	; 0x04
    1fee:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff4:	01 97       	sbiw	r24, 0x01	; 1
    1ff6:	f1 f7       	brne	.-4      	; 0x1ff4 <LCD_vid_SendData+0xdc>
    1ff8:	9c 83       	std	Y+4, r25	; 0x04
    1ffa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ffc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	9e 83       	std	Y+6, r25	; 0x06
    2004:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2006:	8d 81       	ldd	r24, Y+5	; 0x05
    2008:	9e 81       	ldd	r25, Y+6	; 0x06
    200a:	00 97       	sbiw	r24, 0x00	; 0
    200c:	69 f7       	brne	.-38     	; 0x1fe8 <LCD_vid_SendData+0xd0>
    200e:	14 c0       	rjmp	.+40     	; 0x2038 <LCD_vid_SendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2010:	6f 81       	ldd	r22, Y+7	; 0x07
    2012:	78 85       	ldd	r23, Y+8	; 0x08
    2014:	89 85       	ldd	r24, Y+9	; 0x09
    2016:	9a 85       	ldd	r25, Y+10	; 0x0a
    2018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	9e 83       	std	Y+6, r25	; 0x06
    2022:	8d 83       	std	Y+5, r24	; 0x05
    2024:	8d 81       	ldd	r24, Y+5	; 0x05
    2026:	9e 81       	ldd	r25, Y+6	; 0x06
    2028:	9a 83       	std	Y+2, r25	; 0x02
    202a:	89 83       	std	Y+1, r24	; 0x01
    202c:	89 81       	ldd	r24, Y+1	; 0x01
    202e:	9a 81       	ldd	r25, Y+2	; 0x02
    2030:	01 97       	sbiw	r24, 0x01	; 1
    2032:	f1 f7       	brne	.-4      	; 0x2030 <LCD_vid_SendData+0x118>
    2034:	9a 83       	std	Y+2, r25	; 0x02
    2036:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
	DIO_Vid_SetPinValue(CONTROL_PORT, E_PIN,PinLow);
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	67 e0       	ldi	r22, 0x07	; 7
    203c:	40 e0       	ldi	r20, 0x00	; 0
    203e:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_Vid_SetPinValue>

}
    2042:	2f 96       	adiw	r28, 0x0f	; 15
    2044:	0f b6       	in	r0, 0x3f	; 63
    2046:	f8 94       	cli
    2048:	de bf       	out	0x3e, r29	; 62
    204a:	0f be       	out	0x3f, r0	; 63
    204c:	cd bf       	out	0x3d, r28	; 61
    204e:	cf 91       	pop	r28
    2050:	df 91       	pop	r29
    2052:	08 95       	ret

00002054 <LCD_vid_SendCmd>:

void LCD_vid_SendCmd(u8 Copy_u8Cmd){
    2054:	df 93       	push	r29
    2056:	cf 93       	push	r28
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
    205c:	2f 97       	sbiw	r28, 0x0f	; 15
    205e:	0f b6       	in	r0, 0x3f	; 63
    2060:	f8 94       	cli
    2062:	de bf       	out	0x3e, r29	; 62
    2064:	0f be       	out	0x3f, r0	; 63
    2066:	cd bf       	out	0x3d, r28	; 61
    2068:	8f 87       	std	Y+15, r24	; 0x0f

	DIO_Vid_SetPinValue(CONTROL_PORT, RS_PIN,PinLow);   //RS=0        DATA SHEAT
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	65 e0       	ldi	r22, 0x05	; 5
    206e:	40 e0       	ldi	r20, 0x00	; 0
    2070:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_Vid_SetPinValue>
	DIO_Vid_SetPinValue(CONTROL_PORT, RW_PIN,PinLow);   //RW=0
    2074:	80 e0       	ldi	r24, 0x00	; 0
    2076:	66 e0       	ldi	r22, 0x06	; 6
    2078:	40 e0       	ldi	r20, 0x00	; 0
    207a:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_Vid_SetPinValue>
	DIO_Vid_SetPortValue(DATA_PORT, Copy_u8Cmd);
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	6f 85       	ldd	r22, Y+15	; 0x0f
    2082:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <DIO_Vid_SetPortValue>
	DIO_Vid_SetPinValue(CONTROL_PORT, E_PIN,PinHigh);    //E=1&0
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	67 e0       	ldi	r22, 0x07	; 7
    208a:	41 e0       	ldi	r20, 0x01	; 1
    208c:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_Vid_SetPinValue>
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	a0 e4       	ldi	r26, 0x40	; 64
    2096:	b0 e4       	ldi	r27, 0x40	; 64
    2098:	8b 87       	std	Y+11, r24	; 0x0b
    209a:	9c 87       	std	Y+12, r25	; 0x0c
    209c:	ad 87       	std	Y+13, r26	; 0x0d
    209e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    20a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    20a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	4a ef       	ldi	r20, 0xFA	; 250
    20ae:	54 e4       	ldi	r21, 0x44	; 68
    20b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	8f 83       	std	Y+7, r24	; 0x07
    20ba:	98 87       	std	Y+8, r25	; 0x08
    20bc:	a9 87       	std	Y+9, r26	; 0x09
    20be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20c0:	6f 81       	ldd	r22, Y+7	; 0x07
    20c2:	78 85       	ldd	r23, Y+8	; 0x08
    20c4:	89 85       	ldd	r24, Y+9	; 0x09
    20c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	40 e8       	ldi	r20, 0x80	; 128
    20ce:	5f e3       	ldi	r21, 0x3F	; 63
    20d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20d4:	88 23       	and	r24, r24
    20d6:	2c f4       	brge	.+10     	; 0x20e2 <LCD_vid_SendCmd+0x8e>
		__ticks = 1;
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	9e 83       	std	Y+6, r25	; 0x06
    20de:	8d 83       	std	Y+5, r24	; 0x05
    20e0:	3f c0       	rjmp	.+126    	; 0x2160 <LCD_vid_SendCmd+0x10c>
	else if (__tmp > 65535)
    20e2:	6f 81       	ldd	r22, Y+7	; 0x07
    20e4:	78 85       	ldd	r23, Y+8	; 0x08
    20e6:	89 85       	ldd	r24, Y+9	; 0x09
    20e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	3f ef       	ldi	r19, 0xFF	; 255
    20ee:	4f e7       	ldi	r20, 0x7F	; 127
    20f0:	57 e4       	ldi	r21, 0x47	; 71
    20f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20f6:	18 16       	cp	r1, r24
    20f8:	4c f5       	brge	.+82     	; 0x214c <LCD_vid_SendCmd+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    20fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    20fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2100:	9e 85       	ldd	r25, Y+14	; 0x0e
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	40 e2       	ldi	r20, 0x20	; 32
    2108:	51 e4       	ldi	r21, 0x41	; 65
    210a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	bc 01       	movw	r22, r24
    2114:	cd 01       	movw	r24, r26
    2116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	9e 83       	std	Y+6, r25	; 0x06
    2120:	8d 83       	std	Y+5, r24	; 0x05
    2122:	0f c0       	rjmp	.+30     	; 0x2142 <LCD_vid_SendCmd+0xee>
    2124:	88 ec       	ldi	r24, 0xC8	; 200
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	9c 83       	std	Y+4, r25	; 0x04
    212a:	8b 83       	std	Y+3, r24	; 0x03
    212c:	8b 81       	ldd	r24, Y+3	; 0x03
    212e:	9c 81       	ldd	r25, Y+4	; 0x04
    2130:	01 97       	sbiw	r24, 0x01	; 1
    2132:	f1 f7       	brne	.-4      	; 0x2130 <LCD_vid_SendCmd+0xdc>
    2134:	9c 83       	std	Y+4, r25	; 0x04
    2136:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2138:	8d 81       	ldd	r24, Y+5	; 0x05
    213a:	9e 81       	ldd	r25, Y+6	; 0x06
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	9e 83       	std	Y+6, r25	; 0x06
    2140:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2142:	8d 81       	ldd	r24, Y+5	; 0x05
    2144:	9e 81       	ldd	r25, Y+6	; 0x06
    2146:	00 97       	sbiw	r24, 0x00	; 0
    2148:	69 f7       	brne	.-38     	; 0x2124 <LCD_vid_SendCmd+0xd0>
    214a:	14 c0       	rjmp	.+40     	; 0x2174 <LCD_vid_SendCmd+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    214c:	6f 81       	ldd	r22, Y+7	; 0x07
    214e:	78 85       	ldd	r23, Y+8	; 0x08
    2150:	89 85       	ldd	r24, Y+9	; 0x09
    2152:	9a 85       	ldd	r25, Y+10	; 0x0a
    2154:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	9e 83       	std	Y+6, r25	; 0x06
    215e:	8d 83       	std	Y+5, r24	; 0x05
    2160:	8d 81       	ldd	r24, Y+5	; 0x05
    2162:	9e 81       	ldd	r25, Y+6	; 0x06
    2164:	9a 83       	std	Y+2, r25	; 0x02
    2166:	89 83       	std	Y+1, r24	; 0x01
    2168:	89 81       	ldd	r24, Y+1	; 0x01
    216a:	9a 81       	ldd	r25, Y+2	; 0x02
    216c:	01 97       	sbiw	r24, 0x01	; 1
    216e:	f1 f7       	brne	.-4      	; 0x216c <LCD_vid_SendCmd+0x118>
    2170:	9a 83       	std	Y+2, r25	; 0x02
    2172:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
	DIO_Vid_SetPinValue(CONTROL_PORT, E_PIN,PinLow);
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	67 e0       	ldi	r22, 0x07	; 7
    2178:	40 e0       	ldi	r20, 0x00	; 0
    217a:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_Vid_SetPinValue>

}
    217e:	2f 96       	adiw	r28, 0x0f	; 15
    2180:	0f b6       	in	r0, 0x3f	; 63
    2182:	f8 94       	cli
    2184:	de bf       	out	0x3e, r29	; 62
    2186:	0f be       	out	0x3f, r0	; 63
    2188:	cd bf       	out	0x3d, r28	; 61
    218a:	cf 91       	pop	r28
    218c:	df 91       	pop	r29
    218e:	08 95       	ret

00002190 <LCD_Vid_Init>:

void LCD_Vid_Init(void){
    2190:	df 93       	push	r29
    2192:	cf 93       	push	r28
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
    2198:	6c 97       	sbiw	r28, 0x1c	; 28
    219a:	0f b6       	in	r0, 0x3f	; 63
    219c:	f8 94       	cli
    219e:	de bf       	out	0x3e, r29	; 62
    21a0:	0f be       	out	0x3f, r0	; 63
    21a2:	cd bf       	out	0x3d, r28	; 61
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	a0 e2       	ldi	r26, 0x20	; 32
    21aa:	b2 e4       	ldi	r27, 0x42	; 66
    21ac:	89 8f       	std	Y+25, r24	; 0x19
    21ae:	9a 8f       	std	Y+26, r25	; 0x1a
    21b0:	ab 8f       	std	Y+27, r26	; 0x1b
    21b2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b4:	69 8d       	ldd	r22, Y+25	; 0x19
    21b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	4a ef       	ldi	r20, 0xFA	; 250
    21c2:	54 e4       	ldi	r21, 0x44	; 68
    21c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	8d 8b       	std	Y+21, r24	; 0x15
    21ce:	9e 8b       	std	Y+22, r25	; 0x16
    21d0:	af 8b       	std	Y+23, r26	; 0x17
    21d2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21d4:	6d 89       	ldd	r22, Y+21	; 0x15
    21d6:	7e 89       	ldd	r23, Y+22	; 0x16
    21d8:	8f 89       	ldd	r24, Y+23	; 0x17
    21da:	98 8d       	ldd	r25, Y+24	; 0x18
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	40 e8       	ldi	r20, 0x80	; 128
    21e2:	5f e3       	ldi	r21, 0x3F	; 63
    21e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21e8:	88 23       	and	r24, r24
    21ea:	2c f4       	brge	.+10     	; 0x21f6 <LCD_Vid_Init+0x66>
		__ticks = 1;
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	9c 8b       	std	Y+20, r25	; 0x14
    21f2:	8b 8b       	std	Y+19, r24	; 0x13
    21f4:	3f c0       	rjmp	.+126    	; 0x2274 <LCD_Vid_Init+0xe4>
	else if (__tmp > 65535)
    21f6:	6d 89       	ldd	r22, Y+21	; 0x15
    21f8:	7e 89       	ldd	r23, Y+22	; 0x16
    21fa:	8f 89       	ldd	r24, Y+23	; 0x17
    21fc:	98 8d       	ldd	r25, Y+24	; 0x18
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	3f ef       	ldi	r19, 0xFF	; 255
    2202:	4f e7       	ldi	r20, 0x7F	; 127
    2204:	57 e4       	ldi	r21, 0x47	; 71
    2206:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    220a:	18 16       	cp	r1, r24
    220c:	4c f5       	brge	.+82     	; 0x2260 <LCD_Vid_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    220e:	69 8d       	ldd	r22, Y+25	; 0x19
    2210:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2212:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2214:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	40 e2       	ldi	r20, 0x20	; 32
    221c:	51 e4       	ldi	r21, 0x41	; 65
    221e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	bc 01       	movw	r22, r24
    2228:	cd 01       	movw	r24, r26
    222a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	9c 8b       	std	Y+20, r25	; 0x14
    2234:	8b 8b       	std	Y+19, r24	; 0x13
    2236:	0f c0       	rjmp	.+30     	; 0x2256 <LCD_Vid_Init+0xc6>
    2238:	88 ec       	ldi	r24, 0xC8	; 200
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	9a 8b       	std	Y+18, r25	; 0x12
    223e:	89 8b       	std	Y+17, r24	; 0x11
    2240:	89 89       	ldd	r24, Y+17	; 0x11
    2242:	9a 89       	ldd	r25, Y+18	; 0x12
    2244:	01 97       	sbiw	r24, 0x01	; 1
    2246:	f1 f7       	brne	.-4      	; 0x2244 <LCD_Vid_Init+0xb4>
    2248:	9a 8b       	std	Y+18, r25	; 0x12
    224a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    224c:	8b 89       	ldd	r24, Y+19	; 0x13
    224e:	9c 89       	ldd	r25, Y+20	; 0x14
    2250:	01 97       	sbiw	r24, 0x01	; 1
    2252:	9c 8b       	std	Y+20, r25	; 0x14
    2254:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2256:	8b 89       	ldd	r24, Y+19	; 0x13
    2258:	9c 89       	ldd	r25, Y+20	; 0x14
    225a:	00 97       	sbiw	r24, 0x00	; 0
    225c:	69 f7       	brne	.-38     	; 0x2238 <LCD_Vid_Init+0xa8>
    225e:	14 c0       	rjmp	.+40     	; 0x2288 <LCD_Vid_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2260:	6d 89       	ldd	r22, Y+21	; 0x15
    2262:	7e 89       	ldd	r23, Y+22	; 0x16
    2264:	8f 89       	ldd	r24, Y+23	; 0x17
    2266:	98 8d       	ldd	r25, Y+24	; 0x18
    2268:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	9c 8b       	std	Y+20, r25	; 0x14
    2272:	8b 8b       	std	Y+19, r24	; 0x13
    2274:	8b 89       	ldd	r24, Y+19	; 0x13
    2276:	9c 89       	ldd	r25, Y+20	; 0x14
    2278:	98 8b       	std	Y+16, r25	; 0x10
    227a:	8f 87       	std	Y+15, r24	; 0x0f
    227c:	8f 85       	ldd	r24, Y+15	; 0x0f
    227e:	98 89       	ldd	r25, Y+16	; 0x10
    2280:	01 97       	sbiw	r24, 0x01	; 1
    2282:	f1 f7       	brne	.-4      	; 0x2280 <LCD_Vid_Init+0xf0>
    2284:	98 8b       	std	Y+16, r25	; 0x10
    2286:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(40);
	LCD_vid_SendCmd(0b00111100);
    2288:	8c e3       	ldi	r24, 0x3C	; 60
    228a:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_vid_SendCmd>
    228e:	80 e0       	ldi	r24, 0x00	; 0
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	a0 e8       	ldi	r26, 0x80	; 128
    2294:	bf e3       	ldi	r27, 0x3F	; 63
    2296:	8b 87       	std	Y+11, r24	; 0x0b
    2298:	9c 87       	std	Y+12, r25	; 0x0c
    229a:	ad 87       	std	Y+13, r26	; 0x0d
    229c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    229e:	6b 85       	ldd	r22, Y+11	; 0x0b
    22a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	4a ef       	ldi	r20, 0xFA	; 250
    22ac:	54 e4       	ldi	r21, 0x44	; 68
    22ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	8f 83       	std	Y+7, r24	; 0x07
    22b8:	98 87       	std	Y+8, r25	; 0x08
    22ba:	a9 87       	std	Y+9, r26	; 0x09
    22bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22be:	6f 81       	ldd	r22, Y+7	; 0x07
    22c0:	78 85       	ldd	r23, Y+8	; 0x08
    22c2:	89 85       	ldd	r24, Y+9	; 0x09
    22c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	40 e8       	ldi	r20, 0x80	; 128
    22cc:	5f e3       	ldi	r21, 0x3F	; 63
    22ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22d2:	88 23       	and	r24, r24
    22d4:	2c f4       	brge	.+10     	; 0x22e0 <LCD_Vid_Init+0x150>
		__ticks = 1;
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	9e 83       	std	Y+6, r25	; 0x06
    22dc:	8d 83       	std	Y+5, r24	; 0x05
    22de:	3f c0       	rjmp	.+126    	; 0x235e <LCD_Vid_Init+0x1ce>
	else if (__tmp > 65535)
    22e0:	6f 81       	ldd	r22, Y+7	; 0x07
    22e2:	78 85       	ldd	r23, Y+8	; 0x08
    22e4:	89 85       	ldd	r24, Y+9	; 0x09
    22e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	3f ef       	ldi	r19, 0xFF	; 255
    22ec:	4f e7       	ldi	r20, 0x7F	; 127
    22ee:	57 e4       	ldi	r21, 0x47	; 71
    22f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22f4:	18 16       	cp	r1, r24
    22f6:	4c f5       	brge	.+82     	; 0x234a <LCD_Vid_Init+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    22fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    22fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	40 e2       	ldi	r20, 0x20	; 32
    2306:	51 e4       	ldi	r21, 0x41	; 65
    2308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	bc 01       	movw	r22, r24
    2312:	cd 01       	movw	r24, r26
    2314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2318:	dc 01       	movw	r26, r24
    231a:	cb 01       	movw	r24, r22
    231c:	9e 83       	std	Y+6, r25	; 0x06
    231e:	8d 83       	std	Y+5, r24	; 0x05
    2320:	0f c0       	rjmp	.+30     	; 0x2340 <LCD_Vid_Init+0x1b0>
    2322:	88 ec       	ldi	r24, 0xC8	; 200
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	9c 83       	std	Y+4, r25	; 0x04
    2328:	8b 83       	std	Y+3, r24	; 0x03
    232a:	8b 81       	ldd	r24, Y+3	; 0x03
    232c:	9c 81       	ldd	r25, Y+4	; 0x04
    232e:	01 97       	sbiw	r24, 0x01	; 1
    2330:	f1 f7       	brne	.-4      	; 0x232e <LCD_Vid_Init+0x19e>
    2332:	9c 83       	std	Y+4, r25	; 0x04
    2334:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2336:	8d 81       	ldd	r24, Y+5	; 0x05
    2338:	9e 81       	ldd	r25, Y+6	; 0x06
    233a:	01 97       	sbiw	r24, 0x01	; 1
    233c:	9e 83       	std	Y+6, r25	; 0x06
    233e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2340:	8d 81       	ldd	r24, Y+5	; 0x05
    2342:	9e 81       	ldd	r25, Y+6	; 0x06
    2344:	00 97       	sbiw	r24, 0x00	; 0
    2346:	69 f7       	brne	.-38     	; 0x2322 <LCD_Vid_Init+0x192>
    2348:	14 c0       	rjmp	.+40     	; 0x2372 <LCD_Vid_Init+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    234a:	6f 81       	ldd	r22, Y+7	; 0x07
    234c:	78 85       	ldd	r23, Y+8	; 0x08
    234e:	89 85       	ldd	r24, Y+9	; 0x09
    2350:	9a 85       	ldd	r25, Y+10	; 0x0a
    2352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	9e 83       	std	Y+6, r25	; 0x06
    235c:	8d 83       	std	Y+5, r24	; 0x05
    235e:	8d 81       	ldd	r24, Y+5	; 0x05
    2360:	9e 81       	ldd	r25, Y+6	; 0x06
    2362:	9a 83       	std	Y+2, r25	; 0x02
    2364:	89 83       	std	Y+1, r24	; 0x01
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	9a 81       	ldd	r25, Y+2	; 0x02
    236a:	01 97       	sbiw	r24, 0x01	; 1
    236c:	f1 f7       	brne	.-4      	; 0x236a <LCD_Vid_Init+0x1da>
    236e:	9a 83       	std	Y+2, r25	; 0x02
    2370:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	LCD_vid_SendCmd(0b00001100);
    2372:	8c e0       	ldi	r24, 0x0C	; 12
    2374:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_vid_SendCmd>

	LCD_vid_SendCmd(1);
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_vid_SendCmd>

}
    237e:	6c 96       	adiw	r28, 0x1c	; 28
    2380:	0f b6       	in	r0, 0x3f	; 63
    2382:	f8 94       	cli
    2384:	de bf       	out	0x3e, r29	; 62
    2386:	0f be       	out	0x3f, r0	; 63
    2388:	cd bf       	out	0x3d, r28	; 61
    238a:	cf 91       	pop	r28
    238c:	df 91       	pop	r29
    238e:	08 95       	ret

00002390 <LCD_vid_DisplayClear>:

void LCD_vid_DisplayClear(){
    2390:	df 93       	push	r29
    2392:	cf 93       	push	r28
    2394:	cd b7       	in	r28, 0x3d	; 61
    2396:	de b7       	in	r29, 0x3e	; 62
	LCD_vid_SendCmd(1);
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_vid_SendCmd>
}
    239e:	cf 91       	pop	r28
    23a0:	df 91       	pop	r29
    23a2:	08 95       	ret

000023a4 <LCD_vid_GoTo>:
void LCD_vid_GoTo(u8 Copy_u8X,u8 Copy_u8Y){
    23a4:	df 93       	push	r29
    23a6:	cf 93       	push	r28
    23a8:	00 d0       	rcall	.+0      	; 0x23aa <LCD_vid_GoTo+0x6>
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
    23ae:	89 83       	std	Y+1, r24	; 0x01
    23b0:	6a 83       	std	Y+2, r22	; 0x02

	if(Copy_u8X==1){
    23b2:	89 81       	ldd	r24, Y+1	; 0x01
    23b4:	81 30       	cpi	r24, 0x01	; 1
    23b6:	19 f4       	brne	.+6      	; 0x23be <LCD_vid_GoTo+0x1a>
		Copy_u8Y +=0x40;
    23b8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ba:	80 5c       	subi	r24, 0xC0	; 192
    23bc:	8a 83       	std	Y+2, r24	; 0x02
	}

	LCD_vid_SendCmd(Copy_u8Y+0b10000000);       //the place which i want go to in DDRAM//
    23be:	8a 81       	ldd	r24, Y+2	; 0x02
    23c0:	80 58       	subi	r24, 0x80	; 128
    23c2:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_vid_SendCmd>
}
    23c6:	0f 90       	pop	r0
    23c8:	0f 90       	pop	r0
    23ca:	cf 91       	pop	r28
    23cc:	df 91       	pop	r29
    23ce:	08 95       	ret

000023d0 <LCD_VidSendSpecaialChar>:

//x=0for first line and 1 for secondline
//y=0--->16
void LCD_VidSendSpecaialChar(u8 *Pattern,u8 Pattern_Num,u8 Copy_u8XPos,u8 Copy_u8YPos){
    23d0:	df 93       	push	r29
    23d2:	cf 93       	push	r28
    23d4:	cd b7       	in	r28, 0x3d	; 61
    23d6:	de b7       	in	r29, 0x3e	; 62
    23d8:	27 97       	sbiw	r28, 0x07	; 7
    23da:	0f b6       	in	r0, 0x3f	; 63
    23dc:	f8 94       	cli
    23de:	de bf       	out	0x3e, r29	; 62
    23e0:	0f be       	out	0x3f, r0	; 63
    23e2:	cd bf       	out	0x3d, r28	; 61
    23e4:	9c 83       	std	Y+4, r25	; 0x04
    23e6:	8b 83       	std	Y+3, r24	; 0x03
    23e8:	6d 83       	std	Y+5, r22	; 0x05
    23ea:	4e 83       	std	Y+6, r20	; 0x06
    23ec:	2f 83       	std	Y+7, r18	; 0x07

u8 Local_Adress=8*Pattern_Num;
    23ee:	8d 81       	ldd	r24, Y+5	; 0x05
    23f0:	88 2f       	mov	r24, r24
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	88 0f       	add	r24, r24
    23f6:	99 1f       	adc	r25, r25
    23f8:	88 0f       	add	r24, r24
    23fa:	99 1f       	adc	r25, r25
    23fc:	88 0f       	add	r24, r24
    23fe:	99 1f       	adc	r25, r25
    2400:	8a 83       	std	Y+2, r24	; 0x02
LCD_vid_SendCmd(0b01000000+Local_Adress);
    2402:	8a 81       	ldd	r24, Y+2	; 0x02
    2404:	80 5c       	subi	r24, 0xC0	; 192
    2406:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_vid_SendCmd>
for(u8 i=0;i<8;i++){
    240a:	19 82       	std	Y+1, r1	; 0x01
    240c:	0e c0       	rjmp	.+28     	; 0x242a <LCD_VidSendSpecaialChar+0x5a>
	LCD_vid_SendData(Pattern[i]);
    240e:	89 81       	ldd	r24, Y+1	; 0x01
    2410:	28 2f       	mov	r18, r24
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	8b 81       	ldd	r24, Y+3	; 0x03
    2416:	9c 81       	ldd	r25, Y+4	; 0x04
    2418:	fc 01       	movw	r30, r24
    241a:	e2 0f       	add	r30, r18
    241c:	f3 1f       	adc	r31, r19
    241e:	80 81       	ld	r24, Z
    2420:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <LCD_vid_SendData>
//y=0--->16
void LCD_VidSendSpecaialChar(u8 *Pattern,u8 Pattern_Num,u8 Copy_u8XPos,u8 Copy_u8YPos){

u8 Local_Adress=8*Pattern_Num;
LCD_vid_SendCmd(0b01000000+Local_Adress);
for(u8 i=0;i<8;i++){
    2424:	89 81       	ldd	r24, Y+1	; 0x01
    2426:	8f 5f       	subi	r24, 0xFF	; 255
    2428:	89 83       	std	Y+1, r24	; 0x01
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	88 30       	cpi	r24, 0x08	; 8
    242e:	78 f3       	brcs	.-34     	; 0x240e <LCD_VidSendSpecaialChar+0x3e>
	LCD_vid_SendData(Pattern[i]);
}
LCD_vid_GoTo(Copy_u8XPos,Copy_u8YPos);
    2430:	8e 81       	ldd	r24, Y+6	; 0x06
    2432:	6f 81       	ldd	r22, Y+7	; 0x07
    2434:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_vid_GoTo>
LCD_vid_SendData(Pattern_Num);
    2438:	8d 81       	ldd	r24, Y+5	; 0x05
    243a:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <LCD_vid_SendData>
}
    243e:	27 96       	adiw	r28, 0x07	; 7
    2440:	0f b6       	in	r0, 0x3f	; 63
    2442:	f8 94       	cli
    2444:	de bf       	out	0x3e, r29	; 62
    2446:	0f be       	out	0x3f, r0	; 63
    2448:	cd bf       	out	0x3d, r28	; 61
    244a:	cf 91       	pop	r28
    244c:	df 91       	pop	r29
    244e:	08 95       	ret

00002450 <LCD_vid_SendInt>:


void LCD_vid_SendInt(u32 Copy_u8Number){
    2450:	df 93       	push	r29
    2452:	cf 93       	push	r28
    2454:	00 d0       	rcall	.+0      	; 0x2456 <LCD_vid_SendInt+0x6>
    2456:	cd b7       	in	r28, 0x3d	; 61
    2458:	de b7       	in	r29, 0x3e	; 62
    245a:	9a 83       	std	Y+2, r25	; 0x02
    245c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Number!=0){
    245e:	89 81       	ldd	r24, Y+1	; 0x01
    2460:	9a 81       	ldd	r25, Y+2	; 0x02
    2462:	00 97       	sbiw	r24, 0x00	; 0
    2464:	a1 f0       	breq	.+40     	; 0x248e <LCD_vid_SendInt+0x3e>
		LCD_vid_SendInt(Copy_u8Number/10);
    2466:	89 81       	ldd	r24, Y+1	; 0x01
    2468:	9a 81       	ldd	r25, Y+2	; 0x02
    246a:	2a e0       	ldi	r18, 0x0A	; 10
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	b9 01       	movw	r22, r18
    2470:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <__udivmodhi4>
    2474:	cb 01       	movw	r24, r22
    2476:	0e 94 28 12 	call	0x2450	; 0x2450 <LCD_vid_SendInt>
		LCD_vid_SendData((Copy_u8Number%10)+48);
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	9a 81       	ldd	r25, Y+2	; 0x02
    247e:	2a e0       	ldi	r18, 0x0A	; 10
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	b9 01       	movw	r22, r18
    2484:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <__udivmodhi4>
    2488:	80 5d       	subi	r24, 0xD0	; 208
    248a:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <LCD_vid_SendData>


	}
}
    248e:	0f 90       	pop	r0
    2490:	0f 90       	pop	r0
    2492:	cf 91       	pop	r28
    2494:	df 91       	pop	r29
    2496:	08 95       	ret

00002498 <LCD_vid_SendString>:


void LCD_vid_SendString(const s8 *Copy_ps8string){
    2498:	df 93       	push	r29
    249a:	cf 93       	push	r28
    249c:	00 d0       	rcall	.+0      	; 0x249e <LCD_vid_SendString+0x6>
    249e:	cd b7       	in	r28, 0x3d	; 61
    24a0:	de b7       	in	r29, 0x3e	; 62
    24a2:	9a 83       	std	Y+2, r25	; 0x02
    24a4:	89 83       	std	Y+1, r24	; 0x01
    24a6:	0a c0       	rjmp	.+20     	; 0x24bc <LCD_vid_SendString+0x24>

	while(*Copy_ps8string!='\0'){

		LCD_vid_SendData(*Copy_ps8string);
    24a8:	e9 81       	ldd	r30, Y+1	; 0x01
    24aa:	fa 81       	ldd	r31, Y+2	; 0x02
    24ac:	80 81       	ld	r24, Z
    24ae:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <LCD_vid_SendData>
		Copy_ps8string++;
    24b2:	89 81       	ldd	r24, Y+1	; 0x01
    24b4:	9a 81       	ldd	r25, Y+2	; 0x02
    24b6:	01 96       	adiw	r24, 0x01	; 1
    24b8:	9a 83       	std	Y+2, r25	; 0x02
    24ba:	89 83       	std	Y+1, r24	; 0x01
}


void LCD_vid_SendString(const s8 *Copy_ps8string){

	while(*Copy_ps8string!='\0'){
    24bc:	e9 81       	ldd	r30, Y+1	; 0x01
    24be:	fa 81       	ldd	r31, Y+2	; 0x02
    24c0:	80 81       	ld	r24, Z
    24c2:	88 23       	and	r24, r24
    24c4:	89 f7       	brne	.-30     	; 0x24a8 <LCD_vid_SendString+0x10>
		LCD_vid_SendData(*Copy_ps8string);
		Copy_ps8string++;
	}


}
    24c6:	0f 90       	pop	r0
    24c8:	0f 90       	pop	r0
    24ca:	cf 91       	pop	r28
    24cc:	df 91       	pop	r29
    24ce:	08 95       	ret

000024d0 <Keypad_Init>:
/*************************************DELAY*******************************/
#include <util/delay.h>



void Keypad_Init() {
    24d0:	df 93       	push	r29
    24d2:	cf 93       	push	r28
    24d4:	cd b7       	in	r28, 0x3d	; 61
    24d6:	de b7       	in	r29, 0x3e	; 62
	//DIO_Vid_SetPortDirection(Port_B,output);   //Column output:only the first 4 bins
	DIO_Vid_SetPinDirection(Port_B,pin0,output);
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	60 e0       	ldi	r22, 0x00	; 0
    24dc:	41 e0       	ldi	r20, 0x01	; 1
    24de:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <DIO_Vid_SetPinDirection>
	DIO_Vid_SetPinDirection(Port_B,pin1,output);
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	61 e0       	ldi	r22, 0x01	; 1
    24e6:	41 e0       	ldi	r20, 0x01	; 1
    24e8:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <DIO_Vid_SetPinDirection>
	DIO_Vid_SetPinDirection(Port_B,pin2,output);
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	62 e0       	ldi	r22, 0x02	; 2
    24f0:	41 e0       	ldi	r20, 0x01	; 1
    24f2:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <DIO_Vid_SetPinDirection>
	DIO_Vid_SetPinDirection(Port_B,pin3,output);
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	63 e0       	ldi	r22, 0x03	; 3
    24fa:	41 e0       	ldi	r20, 0x01	; 1
    24fc:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <DIO_Vid_SetPinDirection>


  //  DIO_Vid_SetPortDirection(Port_A,input);    //Row input pull up: only the first 4 bins
	DIO_Vid_SetPinDirection(Port_A,pin0,input);
    2500:	80 e0       	ldi	r24, 0x00	; 0
    2502:	60 e0       	ldi	r22, 0x00	; 0
    2504:	40 e0       	ldi	r20, 0x00	; 0
    2506:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <DIO_Vid_SetPinDirection>
	DIO_Vid_SetPinDirection(Port_A,pin1,input);
    250a:	80 e0       	ldi	r24, 0x00	; 0
    250c:	61 e0       	ldi	r22, 0x01	; 1
    250e:	40 e0       	ldi	r20, 0x00	; 0
    2510:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <DIO_Vid_SetPinDirection>
	DIO_Vid_SetPinDirection(Port_A,pin2,input);
    2514:	80 e0       	ldi	r24, 0x00	; 0
    2516:	62 e0       	ldi	r22, 0x02	; 2
    2518:	40 e0       	ldi	r20, 0x00	; 0
    251a:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <DIO_Vid_SetPinDirection>
	DIO_Vid_SetPinDirection(Port_A,pin3,input);
    251e:	80 e0       	ldi	r24, 0x00	; 0
    2520:	63 e0       	ldi	r22, 0x03	; 3
    2522:	40 e0       	ldi	r20, 0x00	; 0
    2524:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <DIO_Vid_SetPinDirection>

    DIO_Vid_SetPortValue(Port_A,0b00001111);         //pullup
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	6f e0       	ldi	r22, 0x0F	; 15
    252c:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <DIO_Vid_SetPortValue>

}
    2530:	cf 91       	pop	r28
    2532:	df 91       	pop	r29
    2534:	08 95       	ret

00002536 <Keypad_u8GetPressedKey>:

u8 Keypad_u8GetPressedKey(){
    2536:	df 93       	push	r29
    2538:	cf 93       	push	r28
    253a:	cd b7       	in	r28, 0x3d	; 61
    253c:	de b7       	in	r29, 0x3e	; 62
    253e:	a8 97       	sbiw	r28, 0x28	; 40
    2540:	0f b6       	in	r0, 0x3f	; 63
    2542:	f8 94       	cli
    2544:	de bf       	out	0x3e, r29	; 62
    2546:	0f be       	out	0x3f, r0	; 63
    2548:	cd bf       	out	0x3d, r28	; 61
		u8 Keypad_Arr[4][4]={ {'7','8','9','/'} ,{'4','5','6','*'},{'1','2','3','-'},{'C','0','=','+'} };
    254a:	ce 01       	movw	r24, r28
    254c:	42 96       	adiw	r24, 0x12	; 18
    254e:	9d a3       	std	Y+37, r25	; 0x25
    2550:	8c a3       	std	Y+36, r24	; 0x24
    2552:	ef ec       	ldi	r30, 0xCF	; 207
    2554:	f1 e0       	ldi	r31, 0x01	; 1
    2556:	ff a3       	std	Y+39, r31	; 0x27
    2558:	ee a3       	std	Y+38, r30	; 0x26
    255a:	f0 e1       	ldi	r31, 0x10	; 16
    255c:	f8 a7       	std	Y+40, r31	; 0x28
    255e:	ee a1       	ldd	r30, Y+38	; 0x26
    2560:	ff a1       	ldd	r31, Y+39	; 0x27
    2562:	00 80       	ld	r0, Z
    2564:	8e a1       	ldd	r24, Y+38	; 0x26
    2566:	9f a1       	ldd	r25, Y+39	; 0x27
    2568:	01 96       	adiw	r24, 0x01	; 1
    256a:	9f a3       	std	Y+39, r25	; 0x27
    256c:	8e a3       	std	Y+38, r24	; 0x26
    256e:	ec a1       	ldd	r30, Y+36	; 0x24
    2570:	fd a1       	ldd	r31, Y+37	; 0x25
    2572:	00 82       	st	Z, r0
    2574:	8c a1       	ldd	r24, Y+36	; 0x24
    2576:	9d a1       	ldd	r25, Y+37	; 0x25
    2578:	01 96       	adiw	r24, 0x01	; 1
    257a:	9d a3       	std	Y+37, r25	; 0x25
    257c:	8c a3       	std	Y+36, r24	; 0x24
    257e:	98 a5       	ldd	r25, Y+40	; 0x28
    2580:	91 50       	subi	r25, 0x01	; 1
    2582:	98 a7       	std	Y+40, r25	; 0x28
    2584:	e8 a5       	ldd	r30, Y+40	; 0x28
    2586:	ee 23       	and	r30, r30
    2588:	51 f7       	brne	.-44     	; 0x255e <Keypad_u8GetPressedKey+0x28>
		u8 PressedKey;
		u8 DataInput,Col,Row;
		              /*set one of cols to gnd */


	 for(Col=0;Col<4;Col++)
    258a:	18 8a       	std	Y+16, r1	; 0x10
    258c:	d3 c0       	rjmp	.+422    	; 0x2734 <Keypad_u8GetPressedKey+0x1fe>
		 {   DIO_Vid_SetPinValue(KEYPAD_COL_PORT, Col_Arr[Col],PinLow);
    258e:	88 89       	ldd	r24, Y+16	; 0x10
    2590:	88 2f       	mov	r24, r24
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	fc 01       	movw	r30, r24
    2596:	e9 53       	subi	r30, 0x39	; 57
    2598:	fe 4f       	sbci	r31, 0xFE	; 254
    259a:	90 81       	ld	r25, Z
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	69 2f       	mov	r22, r25
    25a0:	40 e0       	ldi	r20, 0x00	; 0
    25a2:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_Vid_SetPinValue>
		/*check the input of rows pins if one of key was pressed while col(0)is ground then the input value will be gnd */
		    for(Row=0;Row<4;Row++)
    25a6:	1f 86       	std	Y+15, r1	; 0x0f
    25a8:	b2 c0       	rjmp	.+356    	; 0x270e <Keypad_u8GetPressedKey+0x1d8>
		    {
		      DIO_Vid_GetPinValue(KEYPAD_ROW_PORT,Row_Arr[Row],&DataInput);
    25aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    25ac:	88 2f       	mov	r24, r24
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	fc 01       	movw	r30, r24
    25b2:	e5 53       	subi	r30, 0x35	; 53
    25b4:	fe 4f       	sbci	r31, 0xFE	; 254
    25b6:	90 81       	ld	r25, Z
    25b8:	9e 01       	movw	r18, r28
    25ba:	2e 5d       	subi	r18, 0xDE	; 222
    25bc:	3f 4f       	sbci	r19, 0xFF	; 255
    25be:	80 e0       	ldi	r24, 0x00	; 0
    25c0:	69 2f       	mov	r22, r25
    25c2:	a9 01       	movw	r20, r18
    25c4:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <DIO_Vid_GetPinValue>
		      /*check pin value equal to zero or not */
		      if(DataInput==0)
    25c8:	8a a1       	ldd	r24, Y+34	; 0x22
    25ca:	88 23       	and	r24, r24
    25cc:	09 f0       	breq	.+2      	; 0x25d0 <Keypad_u8GetPressedKey+0x9a>
    25ce:	9c c0       	rjmp	.+312    	; 0x2708 <Keypad_u8GetPressedKey+0x1d2>
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	a8 e4       	ldi	r26, 0x48	; 72
    25d6:	b3 e4       	ldi	r27, 0x43	; 67
    25d8:	8b 87       	std	Y+11, r24	; 0x0b
    25da:	9c 87       	std	Y+12, r25	; 0x0c
    25dc:	ad 87       	std	Y+13, r26	; 0x0d
    25de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    25e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    25e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    25e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	4a ef       	ldi	r20, 0xFA	; 250
    25ee:	54 e4       	ldi	r21, 0x44	; 68
    25f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	8f 83       	std	Y+7, r24	; 0x07
    25fa:	98 87       	std	Y+8, r25	; 0x08
    25fc:	a9 87       	std	Y+9, r26	; 0x09
    25fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2600:	6f 81       	ldd	r22, Y+7	; 0x07
    2602:	78 85       	ldd	r23, Y+8	; 0x08
    2604:	89 85       	ldd	r24, Y+9	; 0x09
    2606:	9a 85       	ldd	r25, Y+10	; 0x0a
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	40 e8       	ldi	r20, 0x80	; 128
    260e:	5f e3       	ldi	r21, 0x3F	; 63
    2610:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2614:	88 23       	and	r24, r24
    2616:	2c f4       	brge	.+10     	; 0x2622 <Keypad_u8GetPressedKey+0xec>
		__ticks = 1;
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	9e 83       	std	Y+6, r25	; 0x06
    261e:	8d 83       	std	Y+5, r24	; 0x05
    2620:	3f c0       	rjmp	.+126    	; 0x26a0 <Keypad_u8GetPressedKey+0x16a>
	else if (__tmp > 65535)
    2622:	6f 81       	ldd	r22, Y+7	; 0x07
    2624:	78 85       	ldd	r23, Y+8	; 0x08
    2626:	89 85       	ldd	r24, Y+9	; 0x09
    2628:	9a 85       	ldd	r25, Y+10	; 0x0a
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	3f ef       	ldi	r19, 0xFF	; 255
    262e:	4f e7       	ldi	r20, 0x7F	; 127
    2630:	57 e4       	ldi	r21, 0x47	; 71
    2632:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2636:	18 16       	cp	r1, r24
    2638:	4c f5       	brge	.+82     	; 0x268c <Keypad_u8GetPressedKey+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263a:	6b 85       	ldd	r22, Y+11	; 0x0b
    263c:	7c 85       	ldd	r23, Y+12	; 0x0c
    263e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2640:	9e 85       	ldd	r25, Y+14	; 0x0e
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	40 e2       	ldi	r20, 0x20	; 32
    2648:	51 e4       	ldi	r21, 0x41	; 65
    264a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	bc 01       	movw	r22, r24
    2654:	cd 01       	movw	r24, r26
    2656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	9e 83       	std	Y+6, r25	; 0x06
    2660:	8d 83       	std	Y+5, r24	; 0x05
    2662:	0f c0       	rjmp	.+30     	; 0x2682 <Keypad_u8GetPressedKey+0x14c>
    2664:	88 ec       	ldi	r24, 0xC8	; 200
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	9c 83       	std	Y+4, r25	; 0x04
    266a:	8b 83       	std	Y+3, r24	; 0x03
    266c:	8b 81       	ldd	r24, Y+3	; 0x03
    266e:	9c 81       	ldd	r25, Y+4	; 0x04
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	f1 f7       	brne	.-4      	; 0x2670 <Keypad_u8GetPressedKey+0x13a>
    2674:	9c 83       	std	Y+4, r25	; 0x04
    2676:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2678:	8d 81       	ldd	r24, Y+5	; 0x05
    267a:	9e 81       	ldd	r25, Y+6	; 0x06
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	9e 83       	std	Y+6, r25	; 0x06
    2680:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2682:	8d 81       	ldd	r24, Y+5	; 0x05
    2684:	9e 81       	ldd	r25, Y+6	; 0x06
    2686:	00 97       	sbiw	r24, 0x00	; 0
    2688:	69 f7       	brne	.-38     	; 0x2664 <Keypad_u8GetPressedKey+0x12e>
    268a:	14 c0       	rjmp	.+40     	; 0x26b4 <Keypad_u8GetPressedKey+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    268c:	6f 81       	ldd	r22, Y+7	; 0x07
    268e:	78 85       	ldd	r23, Y+8	; 0x08
    2690:	89 85       	ldd	r24, Y+9	; 0x09
    2692:	9a 85       	ldd	r25, Y+10	; 0x0a
    2694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	9e 83       	std	Y+6, r25	; 0x06
    269e:	8d 83       	std	Y+5, r24	; 0x05
    26a0:	8d 81       	ldd	r24, Y+5	; 0x05
    26a2:	9e 81       	ldd	r25, Y+6	; 0x06
    26a4:	9a 83       	std	Y+2, r25	; 0x02
    26a6:	89 83       	std	Y+1, r24	; 0x01
    26a8:	89 81       	ldd	r24, Y+1	; 0x01
    26aa:	9a 81       	ldd	r25, Y+2	; 0x02
    26ac:	01 97       	sbiw	r24, 0x01	; 1
    26ae:	f1 f7       	brne	.-4      	; 0x26ac <Keypad_u8GetPressedKey+0x176>
    26b0:	9a 83       	std	Y+2, r25	; 0x02
    26b2:	89 83       	std	Y+1, r24	; 0x01
		        {  /* store the asci value of pressed key */
		    	  _delay_ms(200);
		    	PressedKey=Keypad_Arr[Row][Col];
    26b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    26b6:	28 2f       	mov	r18, r24
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	88 89       	ldd	r24, Y+16	; 0x10
    26bc:	48 2f       	mov	r20, r24
    26be:	50 e0       	ldi	r21, 0x00	; 0
    26c0:	22 0f       	add	r18, r18
    26c2:	33 1f       	adc	r19, r19
    26c4:	22 0f       	add	r18, r18
    26c6:	33 1f       	adc	r19, r19
    26c8:	ce 01       	movw	r24, r28
    26ca:	01 96       	adiw	r24, 0x01	; 1
    26cc:	82 0f       	add	r24, r18
    26ce:	93 1f       	adc	r25, r19
    26d0:	84 0f       	add	r24, r20
    26d2:	95 1f       	adc	r25, r21
    26d4:	fc 01       	movw	r30, r24
    26d6:	71 96       	adiw	r30, 0x11	; 17
    26d8:	80 81       	ld	r24, Z
    26da:	89 8b       	std	Y+17, r24	; 0x11
    26dc:	0f c0       	rjmp	.+30     	; 0x26fc <Keypad_u8GetPressedKey+0x1c6>

		      /* keep storing the asci value of pressed key if the key was still pressing */
		      while(DataInput==0)
		           {
		    	  DIO_Vid_GetPinValue(KEYPAD_ROW_PORT,Row_Arr[Row],&DataInput);   /* return the pressed key value to be displayed on lcd or stored*/
    26de:	8f 85       	ldd	r24, Y+15	; 0x0f
    26e0:	88 2f       	mov	r24, r24
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	fc 01       	movw	r30, r24
    26e6:	e5 53       	subi	r30, 0x35	; 53
    26e8:	fe 4f       	sbci	r31, 0xFE	; 254
    26ea:	90 81       	ld	r25, Z
    26ec:	9e 01       	movw	r18, r28
    26ee:	2e 5d       	subi	r18, 0xDE	; 222
    26f0:	3f 4f       	sbci	r19, 0xFF	; 255
    26f2:	80 e0       	ldi	r24, 0x00	; 0
    26f4:	69 2f       	mov	r22, r25
    26f6:	a9 01       	movw	r20, r18
    26f8:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <DIO_Vid_GetPinValue>
		        {  /* store the asci value of pressed key */
		    	  _delay_ms(200);
		    	PressedKey=Keypad_Arr[Row][Col];

		      /* keep storing the asci value of pressed key if the key was still pressing */
		      while(DataInput==0)
    26fc:	8a a1       	ldd	r24, Y+34	; 0x22
    26fe:	88 23       	and	r24, r24
    2700:	71 f3       	breq	.-36     	; 0x26de <Keypad_u8GetPressedKey+0x1a8>
		           {
		    	  DIO_Vid_GetPinValue(KEYPAD_ROW_PORT,Row_Arr[Row],&DataInput);   /* return the pressed key value to be displayed on lcd or stored*/
		           }

		      return PressedKey;
    2702:	f9 89       	ldd	r31, Y+17	; 0x11
    2704:	fb a3       	std	Y+35, r31	; 0x23
    2706:	1c c0       	rjmp	.+56     	; 0x2740 <Keypad_u8GetPressedKey+0x20a>


	 for(Col=0;Col<4;Col++)
		 {   DIO_Vid_SetPinValue(KEYPAD_COL_PORT, Col_Arr[Col],PinLow);
		/*check the input of rows pins if one of key was pressed while col(0)is ground then the input value will be gnd */
		    for(Row=0;Row<4;Row++)
    2708:	8f 85       	ldd	r24, Y+15	; 0x0f
    270a:	8f 5f       	subi	r24, 0xFF	; 255
    270c:	8f 87       	std	Y+15, r24	; 0x0f
    270e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2710:	84 30       	cpi	r24, 0x04	; 4
    2712:	08 f4       	brcc	.+2      	; 0x2716 <Keypad_u8GetPressedKey+0x1e0>
    2714:	4a cf       	rjmp	.-364    	; 0x25aa <Keypad_u8GetPressedKey+0x74>
		           }

		      return PressedKey;
		        }
		    }
		    DIO_Vid_SetPinValue(KEYPAD_COL_PORT, Col_Arr[Col],PinHigh);
    2716:	88 89       	ldd	r24, Y+16	; 0x10
    2718:	88 2f       	mov	r24, r24
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	fc 01       	movw	r30, r24
    271e:	e9 53       	subi	r30, 0x39	; 57
    2720:	fe 4f       	sbci	r31, 0xFE	; 254
    2722:	90 81       	ld	r25, Z
    2724:	81 e0       	ldi	r24, 0x01	; 1
    2726:	69 2f       	mov	r22, r25
    2728:	41 e0       	ldi	r20, 0x01	; 1
    272a:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_Vid_SetPinValue>
		u8 PressedKey;
		u8 DataInput,Col,Row;
		              /*set one of cols to gnd */


	 for(Col=0;Col<4;Col++)
    272e:	88 89       	ldd	r24, Y+16	; 0x10
    2730:	8f 5f       	subi	r24, 0xFF	; 255
    2732:	88 8b       	std	Y+16, r24	; 0x10
    2734:	88 89       	ldd	r24, Y+16	; 0x10
    2736:	84 30       	cpi	r24, 0x04	; 4
    2738:	08 f4       	brcc	.+2      	; 0x273c <Keypad_u8GetPressedKey+0x206>
    273a:	29 cf       	rjmp	.-430    	; 0x258e <Keypad_u8GetPressedKey+0x58>
		        }
		    }
		    DIO_Vid_SetPinValue(KEYPAD_COL_PORT, Col_Arr[Col],PinHigh);
		 }
		/* if there is no key is pressed return message '101'return '0';*/
	return 101;
    273c:	85 e6       	ldi	r24, 0x65	; 101
    273e:	8b a3       	std	Y+35, r24	; 0x23
    2740:	8b a1       	ldd	r24, Y+35	; 0x23
	// return PressedKey;
	  }
    2742:	a8 96       	adiw	r28, 0x28	; 40
    2744:	0f b6       	in	r0, 0x3f	; 63
    2746:	f8 94       	cli
    2748:	de bf       	out	0x3e, r29	; 62
    274a:	0f be       	out	0x3f, r0	; 63
    274c:	cd bf       	out	0x3d, r28	; 61
    274e:	cf 91       	pop	r28
    2750:	df 91       	pop	r29
    2752:	08 95       	ret

00002754 <MOTOR_VidInit>:

/***********************************MCAL************************/
#include"../../MCAL/DIO/DIO_Interface.h"

/**********************************Functions********************/
void MOTOR_VidInit(void){
    2754:	df 93       	push	r29
    2756:	cf 93       	push	r28
    2758:	cd b7       	in	r28, 0x3d	; 61
    275a:	de b7       	in	r29, 0x3e	; 62
	DIO_Vid_SetPinDirection(MOTOR_PORT,MOTOR_ACW_PIN,output);
    275c:	82 e0       	ldi	r24, 0x02	; 2
    275e:	61 e0       	ldi	r22, 0x01	; 1
    2760:	41 e0       	ldi	r20, 0x01	; 1
    2762:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <DIO_Vid_SetPinDirection>
	DIO_Vid_SetPinDirection(MOTOR_PORT,MOTOR_CW_PIN,output);
    2766:	82 e0       	ldi	r24, 0x02	; 2
    2768:	60 e0       	ldi	r22, 0x00	; 0
    276a:	41 e0       	ldi	r20, 0x01	; 1
    276c:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <DIO_Vid_SetPinDirection>

}
    2770:	cf 91       	pop	r28
    2772:	df 91       	pop	r29
    2774:	08 95       	ret

00002776 <MOTOR_VidCounterClockwise>:
void MOTOR_VidCounterClockwise(void){
    2776:	df 93       	push	r29
    2778:	cf 93       	push	r28
    277a:	cd b7       	in	r28, 0x3d	; 61
    277c:	de b7       	in	r29, 0x3e	; 62
	DIO_Vid_SetPinValue(MOTOR_PORT,MOTOR_CW_PIN,PinHigh);
    277e:	82 e0       	ldi	r24, 0x02	; 2
    2780:	60 e0       	ldi	r22, 0x00	; 0
    2782:	41 e0       	ldi	r20, 0x01	; 1
    2784:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_Vid_SetPinValue>
	DIO_Vid_SetPinValue(MOTOR_PORT,MOTOR_ACW_PIN,PinLow);
    2788:	82 e0       	ldi	r24, 0x02	; 2
    278a:	61 e0       	ldi	r22, 0x01	; 1
    278c:	40 e0       	ldi	r20, 0x00	; 0
    278e:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_Vid_SetPinValue>
}
    2792:	cf 91       	pop	r28
    2794:	df 91       	pop	r29
    2796:	08 95       	ret

00002798 <MOTOR_VidCounterAntiClockwise>:
void MOTOR_VidCounterAntiClockwise(void){
    2798:	df 93       	push	r29
    279a:	cf 93       	push	r28
    279c:	cd b7       	in	r28, 0x3d	; 61
    279e:	de b7       	in	r29, 0x3e	; 62
	DIO_Vid_SetPinValue(MOTOR_PORT,MOTOR_ACW_PIN,PinHigh);
    27a0:	82 e0       	ldi	r24, 0x02	; 2
    27a2:	61 e0       	ldi	r22, 0x01	; 1
    27a4:	41 e0       	ldi	r20, 0x01	; 1
    27a6:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_Vid_SetPinValue>
		DIO_Vid_SetPinValue(MOTOR_PORT,MOTOR_CW_PIN,PinLow);
    27aa:	82 e0       	ldi	r24, 0x02	; 2
    27ac:	60 e0       	ldi	r22, 0x00	; 0
    27ae:	40 e0       	ldi	r20, 0x00	; 0
    27b0:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_Vid_SetPinValue>
}
    27b4:	cf 91       	pop	r28
    27b6:	df 91       	pop	r29
    27b8:	08 95       	ret

000027ba <MOTOR_Stop>:
void MOTOR_Stop(void){
    27ba:	df 93       	push	r29
    27bc:	cf 93       	push	r28
    27be:	cd b7       	in	r28, 0x3d	; 61
    27c0:	de b7       	in	r29, 0x3e	; 62
	DIO_Vid_SetPinValue(MOTOR_PORT,MOTOR_CW_PIN,PinHigh);
    27c2:	82 e0       	ldi	r24, 0x02	; 2
    27c4:	60 e0       	ldi	r22, 0x00	; 0
    27c6:	41 e0       	ldi	r20, 0x01	; 1
    27c8:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_Vid_SetPinValue>
	DIO_Vid_SetPinValue(MOTOR_PORT,MOTOR_CW_PIN,PinHigh);
    27cc:	82 e0       	ldi	r24, 0x02	; 2
    27ce:	60 e0       	ldi	r22, 0x00	; 0
    27d0:	41 e0       	ldi	r20, 0x01	; 1
    27d2:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_Vid_SetPinValue>
}
    27d6:	cf 91       	pop	r28
    27d8:	df 91       	pop	r29
    27da:	08 95       	ret

000027dc <Room1_INT0_Handle>:

/*************************Delay*************************/
#include <util/delay.h>


void Room1_INT0_Handle(){
    27dc:	df 93       	push	r29
    27de:	cf 93       	push	r28
    27e0:	cd b7       	in	r28, 0x3d	; 61
    27e2:	de b7       	in	r29, 0x3e	; 62
    27e4:	2f 97       	sbiw	r28, 0x0f	; 15
    27e6:	0f b6       	in	r0, 0x3f	; 63
    27e8:	f8 94       	cli
    27ea:	de bf       	out	0x3e, r29	; 62
    27ec:	0f be       	out	0x3f, r0	; 63
    27ee:	cd bf       	out	0x3d, r28	; 61

	GIE_VidEn();
    27f0:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <GIE_VidEn>
	LCD_vid_DisplayClear();
    27f4:	0e 94 c8 11 	call	0x2390	; 0x2390 <LCD_vid_DisplayClear>
	LCD_vid_GoTo(0,1);
    27f8:	80 e0       	ldi	r24, 0x00	; 0
    27fa:	61 e0       	ldi	r22, 0x01	; 1
    27fc:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_vid_GoTo>
	LCD_vid_SendString("Welcome:ROOM 1");
    2800:	80 e6       	ldi	r24, 0x60	; 96
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_vid_SendString>
    u8 Local_u8TempValue=0;
    2808:	1f 86       	std	Y+15, r1	; 0x0f
    LCD_vid_GoTo(1,0);
    280a:	81 e0       	ldi	r24, 0x01	; 1
    280c:	60 e0       	ldi	r22, 0x00	; 0
    280e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_vid_GoTo>
    LCD_vid_SendString("Temperature: ");
    2812:	8f e6       	ldi	r24, 0x6F	; 111
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_vid_SendString>
    LCD_vid_GoTo(1,12);
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	6c e0       	ldi	r22, 0x0C	; 12
    281e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_vid_GoTo>
   Local_u8TempValue =LM35_u16GetTempReading(CHANNEL0);
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <LM35_u16GetTempReading>
    2828:	8f 87       	std	Y+15, r24	; 0x0f
if(Local_u8TempValue<10)
    282a:	8f 85       	ldd	r24, Y+15	; 0x0f
    282c:	8a 30       	cpi	r24, 0x0A	; 10
    282e:	70 f4       	brcc	.+28     	; 0x284c <Room1_INT0_Handle+0x70>
{        LCD_vid_GoTo(1,12);
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	6c e0       	ldi	r22, 0x0C	; 12
    2834:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_vid_GoTo>
         LCD_vid_SendString("");
    2838:	8d e7       	ldi	r24, 0x7D	; 125
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_vid_SendString>
         LCD_vid_SendInt(Local_u8TempValue);
    2840:	8f 85       	ldd	r24, Y+15	; 0x0f
    2842:	88 2f       	mov	r24, r24
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	0e 94 28 12 	call	0x2450	; 0x2450 <LCD_vid_SendInt>
    284a:	09 c0       	rjmp	.+18     	; 0x285e <Room1_INT0_Handle+0x82>
}

else
{

	 LCD_vid_GoTo(1,12);
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	6c e0       	ldi	r22, 0x0C	; 12
    2850:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_vid_GoTo>
	 LCD_vid_SendInt(Local_u8TempValue);
    2854:	8f 85       	ldd	r24, Y+15	; 0x0f
    2856:	88 2f       	mov	r24, r24
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	0e 94 28 12 	call	0x2450	; 0x2450 <LCD_vid_SendInt>
    285e:	80 e0       	ldi	r24, 0x00	; 0
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	aa e7       	ldi	r26, 0x7A	; 122
    2864:	b4 e4       	ldi	r27, 0x44	; 68
    2866:	8b 87       	std	Y+11, r24	; 0x0b
    2868:	9c 87       	std	Y+12, r25	; 0x0c
    286a:	ad 87       	std	Y+13, r26	; 0x0d
    286c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    286e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2870:	7c 85       	ldd	r23, Y+12	; 0x0c
    2872:	8d 85       	ldd	r24, Y+13	; 0x0d
    2874:	9e 85       	ldd	r25, Y+14	; 0x0e
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	4a ef       	ldi	r20, 0xFA	; 250
    287c:	54 e4       	ldi	r21, 0x44	; 68
    287e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2882:	dc 01       	movw	r26, r24
    2884:	cb 01       	movw	r24, r22
    2886:	8f 83       	std	Y+7, r24	; 0x07
    2888:	98 87       	std	Y+8, r25	; 0x08
    288a:	a9 87       	std	Y+9, r26	; 0x09
    288c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    288e:	6f 81       	ldd	r22, Y+7	; 0x07
    2890:	78 85       	ldd	r23, Y+8	; 0x08
    2892:	89 85       	ldd	r24, Y+9	; 0x09
    2894:	9a 85       	ldd	r25, Y+10	; 0x0a
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	40 e8       	ldi	r20, 0x80	; 128
    289c:	5f e3       	ldi	r21, 0x3F	; 63
    289e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28a2:	88 23       	and	r24, r24
    28a4:	2c f4       	brge	.+10     	; 0x28b0 <Room1_INT0_Handle+0xd4>
		__ticks = 1;
    28a6:	81 e0       	ldi	r24, 0x01	; 1
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	9e 83       	std	Y+6, r25	; 0x06
    28ac:	8d 83       	std	Y+5, r24	; 0x05
    28ae:	3f c0       	rjmp	.+126    	; 0x292e <Room1_INT0_Handle+0x152>
	else if (__tmp > 65535)
    28b0:	6f 81       	ldd	r22, Y+7	; 0x07
    28b2:	78 85       	ldd	r23, Y+8	; 0x08
    28b4:	89 85       	ldd	r24, Y+9	; 0x09
    28b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b8:	20 e0       	ldi	r18, 0x00	; 0
    28ba:	3f ef       	ldi	r19, 0xFF	; 255
    28bc:	4f e7       	ldi	r20, 0x7F	; 127
    28be:	57 e4       	ldi	r21, 0x47	; 71
    28c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28c4:	18 16       	cp	r1, r24
    28c6:	4c f5       	brge	.+82     	; 0x291a <Room1_INT0_Handle+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    28cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    28d0:	20 e0       	ldi	r18, 0x00	; 0
    28d2:	30 e0       	ldi	r19, 0x00	; 0
    28d4:	40 e2       	ldi	r20, 0x20	; 32
    28d6:	51 e4       	ldi	r21, 0x41	; 65
    28d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	bc 01       	movw	r22, r24
    28e2:	cd 01       	movw	r24, r26
    28e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e8:	dc 01       	movw	r26, r24
    28ea:	cb 01       	movw	r24, r22
    28ec:	9e 83       	std	Y+6, r25	; 0x06
    28ee:	8d 83       	std	Y+5, r24	; 0x05
    28f0:	0f c0       	rjmp	.+30     	; 0x2910 <Room1_INT0_Handle+0x134>
    28f2:	88 ec       	ldi	r24, 0xC8	; 200
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	9c 83       	std	Y+4, r25	; 0x04
    28f8:	8b 83       	std	Y+3, r24	; 0x03
    28fa:	8b 81       	ldd	r24, Y+3	; 0x03
    28fc:	9c 81       	ldd	r25, Y+4	; 0x04
    28fe:	01 97       	sbiw	r24, 0x01	; 1
    2900:	f1 f7       	brne	.-4      	; 0x28fe <Room1_INT0_Handle+0x122>
    2902:	9c 83       	std	Y+4, r25	; 0x04
    2904:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2906:	8d 81       	ldd	r24, Y+5	; 0x05
    2908:	9e 81       	ldd	r25, Y+6	; 0x06
    290a:	01 97       	sbiw	r24, 0x01	; 1
    290c:	9e 83       	std	Y+6, r25	; 0x06
    290e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2910:	8d 81       	ldd	r24, Y+5	; 0x05
    2912:	9e 81       	ldd	r25, Y+6	; 0x06
    2914:	00 97       	sbiw	r24, 0x00	; 0
    2916:	69 f7       	brne	.-38     	; 0x28f2 <Room1_INT0_Handle+0x116>
    2918:	14 c0       	rjmp	.+40     	; 0x2942 <Room1_INT0_Handle+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    291a:	6f 81       	ldd	r22, Y+7	; 0x07
    291c:	78 85       	ldd	r23, Y+8	; 0x08
    291e:	89 85       	ldd	r24, Y+9	; 0x09
    2920:	9a 85       	ldd	r25, Y+10	; 0x0a
    2922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	9e 83       	std	Y+6, r25	; 0x06
    292c:	8d 83       	std	Y+5, r24	; 0x05
    292e:	8d 81       	ldd	r24, Y+5	; 0x05
    2930:	9e 81       	ldd	r25, Y+6	; 0x06
    2932:	9a 83       	std	Y+2, r25	; 0x02
    2934:	89 83       	std	Y+1, r24	; 0x01
    2936:	89 81       	ldd	r24, Y+1	; 0x01
    2938:	9a 81       	ldd	r25, Y+2	; 0x02
    293a:	01 97       	sbiw	r24, 0x01	; 1
    293c:	f1 f7       	brne	.-4      	; 0x293a <Room1_INT0_Handle+0x15e>
    293e:	9a 83       	std	Y+2, r25	; 0x02
    2940:	89 83       	std	Y+1, r24	; 0x01
}

_delay_ms(1000);

}
    2942:	2f 96       	adiw	r28, 0x0f	; 15
    2944:	0f b6       	in	r0, 0x3f	; 63
    2946:	f8 94       	cli
    2948:	de bf       	out	0x3e, r29	; 62
    294a:	0f be       	out	0x3f, r0	; 63
    294c:	cd bf       	out	0x3d, r28	; 61
    294e:	cf 91       	pop	r28
    2950:	df 91       	pop	r29
    2952:	08 95       	ret

00002954 <Room2_INT1_Handle>:

void Room2_INT1_Handle(){
    2954:	df 93       	push	r29
    2956:	cf 93       	push	r28
    2958:	cd b7       	in	r28, 0x3d	; 61
    295a:	de b7       	in	r29, 0x3e	; 62
    295c:	2f 97       	sbiw	r28, 0x0f	; 15
    295e:	0f b6       	in	r0, 0x3f	; 63
    2960:	f8 94       	cli
    2962:	de bf       	out	0x3e, r29	; 62
    2964:	0f be       	out	0x3f, r0	; 63
    2966:	cd bf       	out	0x3d, r28	; 61
GIE_VidEn();
    2968:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <GIE_VidEn>
SET_BIT(GIFR,GIFR_INTF1);
    296c:	aa e5       	ldi	r26, 0x5A	; 90
    296e:	b0 e0       	ldi	r27, 0x00	; 0
    2970:	ea e5       	ldi	r30, 0x5A	; 90
    2972:	f0 e0       	ldi	r31, 0x00	; 0
    2974:	80 81       	ld	r24, Z
    2976:	80 68       	ori	r24, 0x80	; 128
    2978:	8c 93       	st	X, r24
	LCD_vid_DisplayClear();
    297a:	0e 94 c8 11 	call	0x2390	; 0x2390 <LCD_vid_DisplayClear>
	LCD_vid_GoTo(0,1);
    297e:	80 e0       	ldi	r24, 0x00	; 0
    2980:	61 e0       	ldi	r22, 0x01	; 1
    2982:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_vid_GoTo>
	LCD_vid_SendString("Welcome:ROOM 2");
    2986:	8e e7       	ldi	r24, 0x7E	; 126
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_vid_SendString>
    u8 Local_u8TempValue=0;
    298e:	1f 86       	std	Y+15, r1	; 0x0f
    LCD_vid_GoTo(1,0);
    2990:	81 e0       	ldi	r24, 0x01	; 1
    2992:	60 e0       	ldi	r22, 0x00	; 0
    2994:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_vid_GoTo>
    LCD_vid_SendString("Temperature: ");
    2998:	8f e6       	ldi	r24, 0x6F	; 111
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_vid_SendString>
    LCD_vid_GoTo(1,12);
    29a0:	81 e0       	ldi	r24, 0x01	; 1
    29a2:	6c e0       	ldi	r22, 0x0C	; 12
    29a4:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_vid_GoTo>
   Local_u8TempValue =LM35_u16GetTempReading(CHANNEL1);
    29a8:	82 e0       	ldi	r24, 0x02	; 2
    29aa:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <LM35_u16GetTempReading>
    29ae:	8f 87       	std	Y+15, r24	; 0x0f
if(Local_u8TempValue<10)
    29b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    29b2:	8a 30       	cpi	r24, 0x0A	; 10
    29b4:	70 f4       	brcc	.+28     	; 0x29d2 <Room2_INT1_Handle+0x7e>
{        LCD_vid_GoTo(1,12);
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	6c e0       	ldi	r22, 0x0C	; 12
    29ba:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_vid_GoTo>
         LCD_vid_SendString("");
    29be:	8d e7       	ldi	r24, 0x7D	; 125
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_vid_SendString>
         LCD_vid_SendInt(Local_u8TempValue);
    29c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    29c8:	88 2f       	mov	r24, r24
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	0e 94 28 12 	call	0x2450	; 0x2450 <LCD_vid_SendInt>
    29d0:	09 c0       	rjmp	.+18     	; 0x29e4 <Room2_INT1_Handle+0x90>
}

else
{

	 LCD_vid_GoTo(1,12);
    29d2:	81 e0       	ldi	r24, 0x01	; 1
    29d4:	6c e0       	ldi	r22, 0x0C	; 12
    29d6:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_vid_GoTo>
	 LCD_vid_SendInt(Local_u8TempValue);
    29da:	8f 85       	ldd	r24, Y+15	; 0x0f
    29dc:	88 2f       	mov	r24, r24
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	0e 94 28 12 	call	0x2450	; 0x2450 <LCD_vid_SendInt>
    29e4:	80 e0       	ldi	r24, 0x00	; 0
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	aa e7       	ldi	r26, 0x7A	; 122
    29ea:	b4 e4       	ldi	r27, 0x44	; 68
    29ec:	8b 87       	std	Y+11, r24	; 0x0b
    29ee:	9c 87       	std	Y+12, r25	; 0x0c
    29f0:	ad 87       	std	Y+13, r26	; 0x0d
    29f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    29f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    29f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    29fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	4a ef       	ldi	r20, 0xFA	; 250
    2a02:	54 e4       	ldi	r21, 0x44	; 68
    2a04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	8f 83       	std	Y+7, r24	; 0x07
    2a0e:	98 87       	std	Y+8, r25	; 0x08
    2a10:	a9 87       	std	Y+9, r26	; 0x09
    2a12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a14:	6f 81       	ldd	r22, Y+7	; 0x07
    2a16:	78 85       	ldd	r23, Y+8	; 0x08
    2a18:	89 85       	ldd	r24, Y+9	; 0x09
    2a1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	40 e8       	ldi	r20, 0x80	; 128
    2a22:	5f e3       	ldi	r21, 0x3F	; 63
    2a24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a28:	88 23       	and	r24, r24
    2a2a:	2c f4       	brge	.+10     	; 0x2a36 <Room2_INT1_Handle+0xe2>
		__ticks = 1;
    2a2c:	81 e0       	ldi	r24, 0x01	; 1
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	9e 83       	std	Y+6, r25	; 0x06
    2a32:	8d 83       	std	Y+5, r24	; 0x05
    2a34:	3f c0       	rjmp	.+126    	; 0x2ab4 <Room2_INT1_Handle+0x160>
	else if (__tmp > 65535)
    2a36:	6f 81       	ldd	r22, Y+7	; 0x07
    2a38:	78 85       	ldd	r23, Y+8	; 0x08
    2a3a:	89 85       	ldd	r24, Y+9	; 0x09
    2a3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	3f ef       	ldi	r19, 0xFF	; 255
    2a42:	4f e7       	ldi	r20, 0x7F	; 127
    2a44:	57 e4       	ldi	r21, 0x47	; 71
    2a46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a4a:	18 16       	cp	r1, r24
    2a4c:	4c f5       	brge	.+82     	; 0x2aa0 <Room2_INT1_Handle+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a50:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a52:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a54:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a56:	20 e0       	ldi	r18, 0x00	; 0
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	40 e2       	ldi	r20, 0x20	; 32
    2a5c:	51 e4       	ldi	r21, 0x41	; 65
    2a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a62:	dc 01       	movw	r26, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	bc 01       	movw	r22, r24
    2a68:	cd 01       	movw	r24, r26
    2a6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	9e 83       	std	Y+6, r25	; 0x06
    2a74:	8d 83       	std	Y+5, r24	; 0x05
    2a76:	0f c0       	rjmp	.+30     	; 0x2a96 <Room2_INT1_Handle+0x142>
    2a78:	88 ec       	ldi	r24, 0xC8	; 200
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	9c 83       	std	Y+4, r25	; 0x04
    2a7e:	8b 83       	std	Y+3, r24	; 0x03
    2a80:	8b 81       	ldd	r24, Y+3	; 0x03
    2a82:	9c 81       	ldd	r25, Y+4	; 0x04
    2a84:	01 97       	sbiw	r24, 0x01	; 1
    2a86:	f1 f7       	brne	.-4      	; 0x2a84 <Room2_INT1_Handle+0x130>
    2a88:	9c 83       	std	Y+4, r25	; 0x04
    2a8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a90:	01 97       	sbiw	r24, 0x01	; 1
    2a92:	9e 83       	std	Y+6, r25	; 0x06
    2a94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a96:	8d 81       	ldd	r24, Y+5	; 0x05
    2a98:	9e 81       	ldd	r25, Y+6	; 0x06
    2a9a:	00 97       	sbiw	r24, 0x00	; 0
    2a9c:	69 f7       	brne	.-38     	; 0x2a78 <Room2_INT1_Handle+0x124>
    2a9e:	14 c0       	rjmp	.+40     	; 0x2ac8 <Room2_INT1_Handle+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aa0:	6f 81       	ldd	r22, Y+7	; 0x07
    2aa2:	78 85       	ldd	r23, Y+8	; 0x08
    2aa4:	89 85       	ldd	r24, Y+9	; 0x09
    2aa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aac:	dc 01       	movw	r26, r24
    2aae:	cb 01       	movw	r24, r22
    2ab0:	9e 83       	std	Y+6, r25	; 0x06
    2ab2:	8d 83       	std	Y+5, r24	; 0x05
    2ab4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab8:	9a 83       	std	Y+2, r25	; 0x02
    2aba:	89 83       	std	Y+1, r24	; 0x01
    2abc:	89 81       	ldd	r24, Y+1	; 0x01
    2abe:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac0:	01 97       	sbiw	r24, 0x01	; 1
    2ac2:	f1 f7       	brne	.-4      	; 0x2ac0 <Room2_INT1_Handle+0x16c>
    2ac4:	9a 83       	std	Y+2, r25	; 0x02
    2ac6:	89 83       	std	Y+1, r24	; 0x01
}
_delay_ms(1000);

}
    2ac8:	2f 96       	adiw	r28, 0x0f	; 15
    2aca:	0f b6       	in	r0, 0x3f	; 63
    2acc:	f8 94       	cli
    2ace:	de bf       	out	0x3e, r29	; 62
    2ad0:	0f be       	out	0x3f, r0	; 63
    2ad2:	cd bf       	out	0x3d, r28	; 61
    2ad4:	cf 91       	pop	r28
    2ad6:	df 91       	pop	r29
    2ad8:	08 95       	ret

00002ada <main>:



int main(){
    2ada:	df 93       	push	r29
    2adc:	cf 93       	push	r28
    2ade:	cd b7       	in	r28, 0x3d	; 61
    2ae0:	de b7       	in	r29, 0x3e	; 62
    2ae2:	aa 97       	sbiw	r28, 0x2a	; 42
    2ae4:	0f b6       	in	r0, 0x3f	; 63
    2ae6:	f8 94       	cli
    2ae8:	de bf       	out	0x3e, r29	; 62
    2aea:	0f be       	out	0x3f, r0	; 63
    2aec:	cd bf       	out	0x3d, r28	; 61

						/*LCD Initializations*/
DIO_Vid_SetPortDirection(Port_B,output);
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	61 e0       	ldi	r22, 0x01	; 1
    2af2:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <DIO_Vid_SetPortDirection>
DIO_Vid_SetPinDirection(Port_A,pin5,output);
    2af6:	80 e0       	ldi	r24, 0x00	; 0
    2af8:	65 e0       	ldi	r22, 0x05	; 5
    2afa:	41 e0       	ldi	r20, 0x01	; 1
    2afc:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <DIO_Vid_SetPinDirection>
DIO_Vid_SetPinDirection(Port_A,pin6,output);
    2b00:	80 e0       	ldi	r24, 0x00	; 0
    2b02:	66 e0       	ldi	r22, 0x06	; 6
    2b04:	41 e0       	ldi	r20, 0x01	; 1
    2b06:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <DIO_Vid_SetPinDirection>
DIO_Vid_SetPinDirection(Port_A,pin7,output);
    2b0a:	80 e0       	ldi	r24, 0x00	; 0
    2b0c:	67 e0       	ldi	r22, 0x07	; 7
    2b0e:	41 e0       	ldi	r20, 0x01	; 1
    2b10:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <DIO_Vid_SetPinDirection>

LCD_Vid_Init();
    2b14:	0e 94 c8 10 	call	0x2190	; 0x2190 <LCD_Vid_Init>

						/*MOTOR INITIALIZATION*/
MOTOR_VidInit();
    2b18:	0e 94 aa 13 	call	0x2754	; 0x2754 <MOTOR_VidInit>

                       /*ADC INITIALIZATION PINS*/

DIO_Vid_SetPinDirection(Port_A,pin0,input);
    2b1c:	80 e0       	ldi	r24, 0x00	; 0
    2b1e:	60 e0       	ldi	r22, 0x00	; 0
    2b20:	40 e0       	ldi	r20, 0x00	; 0
    2b22:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <DIO_Vid_SetPinDirection>
DIO_Vid_SetPinDirection(Port_A,pin1,input);
    2b26:	80 e0       	ldi	r24, 0x00	; 0
    2b28:	61 e0       	ldi	r22, 0x01	; 1
    2b2a:	40 e0       	ldi	r20, 0x00	; 0
    2b2c:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <DIO_Vid_SetPinDirection>


                       /*INTERRUPTS INITIALIZATION*/


DIO_Vid_SetPinDirection(Port_D,pin2,input);  //INT0
    2b30:	83 e0       	ldi	r24, 0x03	; 3
    2b32:	62 e0       	ldi	r22, 0x02	; 2
    2b34:	40 e0       	ldi	r20, 0x00	; 0
    2b36:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <DIO_Vid_SetPinDirection>
DIO_Vid_SetPinDirection(Port_D,pin3,input);  //INT1
    2b3a:	83 e0       	ldi	r24, 0x03	; 3
    2b3c:	63 e0       	ldi	r22, 0x03	; 3
    2b3e:	40 e0       	ldi	r20, 0x00	; 0
    2b40:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <DIO_Vid_SetPinDirection>
GIE_VidEn();
    2b44:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <GIE_VidEn>
EXTI_voidInit();
    2b48:	0e 94 87 06 	call	0xd0e	; 0xd0e <EXTI_voidInit>

                        /*LM35 INITIALIZATION*/
	LM35_voidInit();
    2b4c:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LM35_voidInit>


//LCD_vid_DisplayClear();
LCD_vid_SendString("Welcome to MP5");
    2b50:	8d e8       	ldi	r24, 0x8D	; 141
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_vid_SendString>
LCD_vid_GoTo(1,2);
    2b58:	81 e0       	ldi	r24, 0x01	; 1
    2b5a:	62 e0       	ldi	r22, 0x02	; 2
    2b5c:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_vid_GoTo>
LCD_vid_SendString("Wazeefa_Tech!");
    2b60:	8c e9       	ldi	r24, 0x9C	; 156
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_vid_SendString>
    2b68:	80 e0       	ldi	r24, 0x00	; 0
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	aa ef       	ldi	r26, 0xFA	; 250
    2b6e:	b4 e4       	ldi	r27, 0x44	; 68
    2b70:	8f a3       	std	Y+39, r24	; 0x27
    2b72:	98 a7       	std	Y+40, r25	; 0x28
    2b74:	a9 a7       	std	Y+41, r26	; 0x29
    2b76:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b78:	6f a1       	ldd	r22, Y+39	; 0x27
    2b7a:	78 a5       	ldd	r23, Y+40	; 0x28
    2b7c:	89 a5       	ldd	r24, Y+41	; 0x29
    2b7e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	4a ef       	ldi	r20, 0xFA	; 250
    2b86:	54 e4       	ldi	r21, 0x44	; 68
    2b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	8b a3       	std	Y+35, r24	; 0x23
    2b92:	9c a3       	std	Y+36, r25	; 0x24
    2b94:	ad a3       	std	Y+37, r26	; 0x25
    2b96:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b98:	6b a1       	ldd	r22, Y+35	; 0x23
    2b9a:	7c a1       	ldd	r23, Y+36	; 0x24
    2b9c:	8d a1       	ldd	r24, Y+37	; 0x25
    2b9e:	9e a1       	ldd	r25, Y+38	; 0x26
    2ba0:	20 e0       	ldi	r18, 0x00	; 0
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	40 e8       	ldi	r20, 0x80	; 128
    2ba6:	5f e3       	ldi	r21, 0x3F	; 63
    2ba8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bac:	88 23       	and	r24, r24
    2bae:	2c f4       	brge	.+10     	; 0x2bba <main+0xe0>
		__ticks = 1;
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	9a a3       	std	Y+34, r25	; 0x22
    2bb6:	89 a3       	std	Y+33, r24	; 0x21
    2bb8:	3f c0       	rjmp	.+126    	; 0x2c38 <main+0x15e>
	else if (__tmp > 65535)
    2bba:	6b a1       	ldd	r22, Y+35	; 0x23
    2bbc:	7c a1       	ldd	r23, Y+36	; 0x24
    2bbe:	8d a1       	ldd	r24, Y+37	; 0x25
    2bc0:	9e a1       	ldd	r25, Y+38	; 0x26
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	3f ef       	ldi	r19, 0xFF	; 255
    2bc6:	4f e7       	ldi	r20, 0x7F	; 127
    2bc8:	57 e4       	ldi	r21, 0x47	; 71
    2bca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bce:	18 16       	cp	r1, r24
    2bd0:	4c f5       	brge	.+82     	; 0x2c24 <main+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd2:	6f a1       	ldd	r22, Y+39	; 0x27
    2bd4:	78 a5       	ldd	r23, Y+40	; 0x28
    2bd6:	89 a5       	ldd	r24, Y+41	; 0x29
    2bd8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	40 e2       	ldi	r20, 0x20	; 32
    2be0:	51 e4       	ldi	r21, 0x41	; 65
    2be2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be6:	dc 01       	movw	r26, r24
    2be8:	cb 01       	movw	r24, r22
    2bea:	bc 01       	movw	r22, r24
    2bec:	cd 01       	movw	r24, r26
    2bee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	9a a3       	std	Y+34, r25	; 0x22
    2bf8:	89 a3       	std	Y+33, r24	; 0x21
    2bfa:	0f c0       	rjmp	.+30     	; 0x2c1a <main+0x140>
    2bfc:	88 ec       	ldi	r24, 0xC8	; 200
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	98 a3       	std	Y+32, r25	; 0x20
    2c02:	8f 8f       	std	Y+31, r24	; 0x1f
    2c04:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c06:	98 a1       	ldd	r25, Y+32	; 0x20
    2c08:	01 97       	sbiw	r24, 0x01	; 1
    2c0a:	f1 f7       	brne	.-4      	; 0x2c08 <main+0x12e>
    2c0c:	98 a3       	std	Y+32, r25	; 0x20
    2c0e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c10:	89 a1       	ldd	r24, Y+33	; 0x21
    2c12:	9a a1       	ldd	r25, Y+34	; 0x22
    2c14:	01 97       	sbiw	r24, 0x01	; 1
    2c16:	9a a3       	std	Y+34, r25	; 0x22
    2c18:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c1a:	89 a1       	ldd	r24, Y+33	; 0x21
    2c1c:	9a a1       	ldd	r25, Y+34	; 0x22
    2c1e:	00 97       	sbiw	r24, 0x00	; 0
    2c20:	69 f7       	brne	.-38     	; 0x2bfc <main+0x122>
    2c22:	14 c0       	rjmp	.+40     	; 0x2c4c <main+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c24:	6b a1       	ldd	r22, Y+35	; 0x23
    2c26:	7c a1       	ldd	r23, Y+36	; 0x24
    2c28:	8d a1       	ldd	r24, Y+37	; 0x25
    2c2a:	9e a1       	ldd	r25, Y+38	; 0x26
    2c2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c30:	dc 01       	movw	r26, r24
    2c32:	cb 01       	movw	r24, r22
    2c34:	9a a3       	std	Y+34, r25	; 0x22
    2c36:	89 a3       	std	Y+33, r24	; 0x21
    2c38:	89 a1       	ldd	r24, Y+33	; 0x21
    2c3a:	9a a1       	ldd	r25, Y+34	; 0x22
    2c3c:	9e 8f       	std	Y+30, r25	; 0x1e
    2c3e:	8d 8f       	std	Y+29, r24	; 0x1d
    2c40:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c42:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c44:	01 97       	sbiw	r24, 0x01	; 1
    2c46:	f1 f7       	brne	.-4      	; 0x2c44 <main+0x16a>
    2c48:	9e 8f       	std	Y+30, r25	; 0x1e
    2c4a:	8d 8f       	std	Y+29, r24	; 0x1d
_delay_ms(2000);
LCD_vid_DisplayClear();
    2c4c:	0e 94 c8 11 	call	0x2390	; 0x2390 <LCD_vid_DisplayClear>

EXTI_u8Int0SetCallBack(Room1_INT0_Handle);
    2c50:	8e ee       	ldi	r24, 0xEE	; 238
    2c52:	93 e1       	ldi	r25, 0x13	; 19
    2c54:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <EXTI_u8Int0SetCallBack>
EXTI_u8Int1SetCallBack(Room2_INT1_Handle);
    2c58:	8a ea       	ldi	r24, 0xAA	; 170
    2c5a:	94 e1       	ldi	r25, 0x14	; 20
    2c5c:	0e 94 34 08 	call	0x1068	; 0x1068 <EXTI_u8Int1SetCallBack>
	while(1)
	{
		MOTOR_VidCounterAntiClockwise();
    2c60:	0e 94 cc 13 	call	0x2798	; 0x2798 <MOTOR_VidCounterAntiClockwise>
		LCD_vid_DisplayClear();
    2c64:	0e 94 c8 11 	call	0x2390	; 0x2390 <LCD_vid_DisplayClear>
		LCD_vid_SendString("Motor: CCW");
    2c68:	8a ea       	ldi	r24, 0xAA	; 170
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_vid_SendString>
    2c70:	80 e0       	ldi	r24, 0x00	; 0
    2c72:	90 e8       	ldi	r25, 0x80	; 128
    2c74:	ab e3       	ldi	r26, 0x3B	; 59
    2c76:	b5 e4       	ldi	r27, 0x45	; 69
    2c78:	89 8f       	std	Y+25, r24	; 0x19
    2c7a:	9a 8f       	std	Y+26, r25	; 0x1a
    2c7c:	ab 8f       	std	Y+27, r26	; 0x1b
    2c7e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c80:	69 8d       	ldd	r22, Y+25	; 0x19
    2c82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c88:	20 e0       	ldi	r18, 0x00	; 0
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	4a ef       	ldi	r20, 0xFA	; 250
    2c8e:	54 e4       	ldi	r21, 0x44	; 68
    2c90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c94:	dc 01       	movw	r26, r24
    2c96:	cb 01       	movw	r24, r22
    2c98:	8d 8b       	std	Y+21, r24	; 0x15
    2c9a:	9e 8b       	std	Y+22, r25	; 0x16
    2c9c:	af 8b       	std	Y+23, r26	; 0x17
    2c9e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ca0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ca2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ca4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ca6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	40 e8       	ldi	r20, 0x80	; 128
    2cae:	5f e3       	ldi	r21, 0x3F	; 63
    2cb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cb4:	88 23       	and	r24, r24
    2cb6:	2c f4       	brge	.+10     	; 0x2cc2 <main+0x1e8>
		__ticks = 1;
    2cb8:	81 e0       	ldi	r24, 0x01	; 1
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	9c 8b       	std	Y+20, r25	; 0x14
    2cbe:	8b 8b       	std	Y+19, r24	; 0x13
    2cc0:	3f c0       	rjmp	.+126    	; 0x2d40 <main+0x266>
	else if (__tmp > 65535)
    2cc2:	6d 89       	ldd	r22, Y+21	; 0x15
    2cc4:	7e 89       	ldd	r23, Y+22	; 0x16
    2cc6:	8f 89       	ldd	r24, Y+23	; 0x17
    2cc8:	98 8d       	ldd	r25, Y+24	; 0x18
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	3f ef       	ldi	r19, 0xFF	; 255
    2cce:	4f e7       	ldi	r20, 0x7F	; 127
    2cd0:	57 e4       	ldi	r21, 0x47	; 71
    2cd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cd6:	18 16       	cp	r1, r24
    2cd8:	4c f5       	brge	.+82     	; 0x2d2c <main+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cda:	69 8d       	ldd	r22, Y+25	; 0x19
    2cdc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cde:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ce0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ce2:	20 e0       	ldi	r18, 0x00	; 0
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	40 e2       	ldi	r20, 0x20	; 32
    2ce8:	51 e4       	ldi	r21, 0x41	; 65
    2cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cee:	dc 01       	movw	r26, r24
    2cf0:	cb 01       	movw	r24, r22
    2cf2:	bc 01       	movw	r22, r24
    2cf4:	cd 01       	movw	r24, r26
    2cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cfa:	dc 01       	movw	r26, r24
    2cfc:	cb 01       	movw	r24, r22
    2cfe:	9c 8b       	std	Y+20, r25	; 0x14
    2d00:	8b 8b       	std	Y+19, r24	; 0x13
    2d02:	0f c0       	rjmp	.+30     	; 0x2d22 <main+0x248>
    2d04:	88 ec       	ldi	r24, 0xC8	; 200
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	9a 8b       	std	Y+18, r25	; 0x12
    2d0a:	89 8b       	std	Y+17, r24	; 0x11
    2d0c:	89 89       	ldd	r24, Y+17	; 0x11
    2d0e:	9a 89       	ldd	r25, Y+18	; 0x12
    2d10:	01 97       	sbiw	r24, 0x01	; 1
    2d12:	f1 f7       	brne	.-4      	; 0x2d10 <main+0x236>
    2d14:	9a 8b       	std	Y+18, r25	; 0x12
    2d16:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d18:	8b 89       	ldd	r24, Y+19	; 0x13
    2d1a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d1c:	01 97       	sbiw	r24, 0x01	; 1
    2d1e:	9c 8b       	std	Y+20, r25	; 0x14
    2d20:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d22:	8b 89       	ldd	r24, Y+19	; 0x13
    2d24:	9c 89       	ldd	r25, Y+20	; 0x14
    2d26:	00 97       	sbiw	r24, 0x00	; 0
    2d28:	69 f7       	brne	.-38     	; 0x2d04 <main+0x22a>
    2d2a:	14 c0       	rjmp	.+40     	; 0x2d54 <main+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d2c:	6d 89       	ldd	r22, Y+21	; 0x15
    2d2e:	7e 89       	ldd	r23, Y+22	; 0x16
    2d30:	8f 89       	ldd	r24, Y+23	; 0x17
    2d32:	98 8d       	ldd	r25, Y+24	; 0x18
    2d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d38:	dc 01       	movw	r26, r24
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	9c 8b       	std	Y+20, r25	; 0x14
    2d3e:	8b 8b       	std	Y+19, r24	; 0x13
    2d40:	8b 89       	ldd	r24, Y+19	; 0x13
    2d42:	9c 89       	ldd	r25, Y+20	; 0x14
    2d44:	98 8b       	std	Y+16, r25	; 0x10
    2d46:	8f 87       	std	Y+15, r24	; 0x0f
    2d48:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d4a:	98 89       	ldd	r25, Y+16	; 0x10
    2d4c:	01 97       	sbiw	r24, 0x01	; 1
    2d4e:	f1 f7       	brne	.-4      	; 0x2d4c <main+0x272>
    2d50:	98 8b       	std	Y+16, r25	; 0x10
    2d52:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(3000);
		MOTOR_VidCounterClockwise();
    2d54:	0e 94 bb 13 	call	0x2776	; 0x2776 <MOTOR_VidCounterClockwise>
		LCD_vid_DisplayClear();
    2d58:	0e 94 c8 11 	call	0x2390	; 0x2390 <LCD_vid_DisplayClear>
		LCD_vid_SendString("Motor: CW");
    2d5c:	85 eb       	ldi	r24, 0xB5	; 181
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_vid_SendString>
    2d64:	80 e0       	ldi	r24, 0x00	; 0
    2d66:	90 e8       	ldi	r25, 0x80	; 128
    2d68:	ab e3       	ldi	r26, 0x3B	; 59
    2d6a:	b5 e4       	ldi	r27, 0x45	; 69
    2d6c:	8b 87       	std	Y+11, r24	; 0x0b
    2d6e:	9c 87       	std	Y+12, r25	; 0x0c
    2d70:	ad 87       	std	Y+13, r26	; 0x0d
    2d72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d74:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d76:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d78:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	4a ef       	ldi	r20, 0xFA	; 250
    2d82:	54 e4       	ldi	r21, 0x44	; 68
    2d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	8f 83       	std	Y+7, r24	; 0x07
    2d8e:	98 87       	std	Y+8, r25	; 0x08
    2d90:	a9 87       	std	Y+9, r26	; 0x09
    2d92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d94:	6f 81       	ldd	r22, Y+7	; 0x07
    2d96:	78 85       	ldd	r23, Y+8	; 0x08
    2d98:	89 85       	ldd	r24, Y+9	; 0x09
    2d9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d9c:	20 e0       	ldi	r18, 0x00	; 0
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	40 e8       	ldi	r20, 0x80	; 128
    2da2:	5f e3       	ldi	r21, 0x3F	; 63
    2da4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2da8:	88 23       	and	r24, r24
    2daa:	2c f4       	brge	.+10     	; 0x2db6 <main+0x2dc>
		__ticks = 1;
    2dac:	81 e0       	ldi	r24, 0x01	; 1
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	9e 83       	std	Y+6, r25	; 0x06
    2db2:	8d 83       	std	Y+5, r24	; 0x05
    2db4:	3f c0       	rjmp	.+126    	; 0x2e34 <main+0x35a>
	else if (__tmp > 65535)
    2db6:	6f 81       	ldd	r22, Y+7	; 0x07
    2db8:	78 85       	ldd	r23, Y+8	; 0x08
    2dba:	89 85       	ldd	r24, Y+9	; 0x09
    2dbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dbe:	20 e0       	ldi	r18, 0x00	; 0
    2dc0:	3f ef       	ldi	r19, 0xFF	; 255
    2dc2:	4f e7       	ldi	r20, 0x7F	; 127
    2dc4:	57 e4       	ldi	r21, 0x47	; 71
    2dc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dca:	18 16       	cp	r1, r24
    2dcc:	4c f5       	brge	.+82     	; 0x2e20 <main+0x346>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dce:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	40 e2       	ldi	r20, 0x20	; 32
    2ddc:	51 e4       	ldi	r21, 0x41	; 65
    2dde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de2:	dc 01       	movw	r26, r24
    2de4:	cb 01       	movw	r24, r22
    2de6:	bc 01       	movw	r22, r24
    2de8:	cd 01       	movw	r24, r26
    2dea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dee:	dc 01       	movw	r26, r24
    2df0:	cb 01       	movw	r24, r22
    2df2:	9e 83       	std	Y+6, r25	; 0x06
    2df4:	8d 83       	std	Y+5, r24	; 0x05
    2df6:	0f c0       	rjmp	.+30     	; 0x2e16 <main+0x33c>
    2df8:	88 ec       	ldi	r24, 0xC8	; 200
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	9c 83       	std	Y+4, r25	; 0x04
    2dfe:	8b 83       	std	Y+3, r24	; 0x03
    2e00:	8b 81       	ldd	r24, Y+3	; 0x03
    2e02:	9c 81       	ldd	r25, Y+4	; 0x04
    2e04:	01 97       	sbiw	r24, 0x01	; 1
    2e06:	f1 f7       	brne	.-4      	; 0x2e04 <main+0x32a>
    2e08:	9c 83       	std	Y+4, r25	; 0x04
    2e0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e10:	01 97       	sbiw	r24, 0x01	; 1
    2e12:	9e 83       	std	Y+6, r25	; 0x06
    2e14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e16:	8d 81       	ldd	r24, Y+5	; 0x05
    2e18:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1a:	00 97       	sbiw	r24, 0x00	; 0
    2e1c:	69 f7       	brne	.-38     	; 0x2df8 <main+0x31e>
    2e1e:	20 cf       	rjmp	.-448    	; 0x2c60 <main+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e20:	6f 81       	ldd	r22, Y+7	; 0x07
    2e22:	78 85       	ldd	r23, Y+8	; 0x08
    2e24:	89 85       	ldd	r24, Y+9	; 0x09
    2e26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	cb 01       	movw	r24, r22
    2e30:	9e 83       	std	Y+6, r25	; 0x06
    2e32:	8d 83       	std	Y+5, r24	; 0x05
    2e34:	8d 81       	ldd	r24, Y+5	; 0x05
    2e36:	9e 81       	ldd	r25, Y+6	; 0x06
    2e38:	9a 83       	std	Y+2, r25	; 0x02
    2e3a:	89 83       	std	Y+1, r24	; 0x01
    2e3c:	89 81       	ldd	r24, Y+1	; 0x01
    2e3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e40:	01 97       	sbiw	r24, 0x01	; 1
    2e42:	f1 f7       	brne	.-4      	; 0x2e40 <main+0x366>
    2e44:	9a 83       	std	Y+2, r25	; 0x02
    2e46:	89 83       	std	Y+1, r24	; 0x01
    2e48:	0b cf       	rjmp	.-490    	; 0x2c60 <main+0x186>

00002e4a <__udivmodhi4>:
    2e4a:	aa 1b       	sub	r26, r26
    2e4c:	bb 1b       	sub	r27, r27
    2e4e:	51 e1       	ldi	r21, 0x11	; 17
    2e50:	07 c0       	rjmp	.+14     	; 0x2e60 <__udivmodhi4_ep>

00002e52 <__udivmodhi4_loop>:
    2e52:	aa 1f       	adc	r26, r26
    2e54:	bb 1f       	adc	r27, r27
    2e56:	a6 17       	cp	r26, r22
    2e58:	b7 07       	cpc	r27, r23
    2e5a:	10 f0       	brcs	.+4      	; 0x2e60 <__udivmodhi4_ep>
    2e5c:	a6 1b       	sub	r26, r22
    2e5e:	b7 0b       	sbc	r27, r23

00002e60 <__udivmodhi4_ep>:
    2e60:	88 1f       	adc	r24, r24
    2e62:	99 1f       	adc	r25, r25
    2e64:	5a 95       	dec	r21
    2e66:	a9 f7       	brne	.-22     	; 0x2e52 <__udivmodhi4_loop>
    2e68:	80 95       	com	r24
    2e6a:	90 95       	com	r25
    2e6c:	bc 01       	movw	r22, r24
    2e6e:	cd 01       	movw	r24, r26
    2e70:	08 95       	ret

00002e72 <__prologue_saves__>:
    2e72:	2f 92       	push	r2
    2e74:	3f 92       	push	r3
    2e76:	4f 92       	push	r4
    2e78:	5f 92       	push	r5
    2e7a:	6f 92       	push	r6
    2e7c:	7f 92       	push	r7
    2e7e:	8f 92       	push	r8
    2e80:	9f 92       	push	r9
    2e82:	af 92       	push	r10
    2e84:	bf 92       	push	r11
    2e86:	cf 92       	push	r12
    2e88:	df 92       	push	r13
    2e8a:	ef 92       	push	r14
    2e8c:	ff 92       	push	r15
    2e8e:	0f 93       	push	r16
    2e90:	1f 93       	push	r17
    2e92:	cf 93       	push	r28
    2e94:	df 93       	push	r29
    2e96:	cd b7       	in	r28, 0x3d	; 61
    2e98:	de b7       	in	r29, 0x3e	; 62
    2e9a:	ca 1b       	sub	r28, r26
    2e9c:	db 0b       	sbc	r29, r27
    2e9e:	0f b6       	in	r0, 0x3f	; 63
    2ea0:	f8 94       	cli
    2ea2:	de bf       	out	0x3e, r29	; 62
    2ea4:	0f be       	out	0x3f, r0	; 63
    2ea6:	cd bf       	out	0x3d, r28	; 61
    2ea8:	09 94       	ijmp

00002eaa <__epilogue_restores__>:
    2eaa:	2a 88       	ldd	r2, Y+18	; 0x12
    2eac:	39 88       	ldd	r3, Y+17	; 0x11
    2eae:	48 88       	ldd	r4, Y+16	; 0x10
    2eb0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2eb2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2eb4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2eb6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2eb8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2eba:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ebc:	b9 84       	ldd	r11, Y+9	; 0x09
    2ebe:	c8 84       	ldd	r12, Y+8	; 0x08
    2ec0:	df 80       	ldd	r13, Y+7	; 0x07
    2ec2:	ee 80       	ldd	r14, Y+6	; 0x06
    2ec4:	fd 80       	ldd	r15, Y+5	; 0x05
    2ec6:	0c 81       	ldd	r16, Y+4	; 0x04
    2ec8:	1b 81       	ldd	r17, Y+3	; 0x03
    2eca:	aa 81       	ldd	r26, Y+2	; 0x02
    2ecc:	b9 81       	ldd	r27, Y+1	; 0x01
    2ece:	ce 0f       	add	r28, r30
    2ed0:	d1 1d       	adc	r29, r1
    2ed2:	0f b6       	in	r0, 0x3f	; 63
    2ed4:	f8 94       	cli
    2ed6:	de bf       	out	0x3e, r29	; 62
    2ed8:	0f be       	out	0x3f, r0	; 63
    2eda:	cd bf       	out	0x3d, r28	; 61
    2edc:	ed 01       	movw	r28, r26
    2ede:	08 95       	ret

00002ee0 <_exit>:
    2ee0:	f8 94       	cli

00002ee2 <__stop_program>:
    2ee2:	ff cf       	rjmp	.-2      	; 0x2ee2 <__stop_program>
